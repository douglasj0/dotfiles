# -*- mode: sh -*-
# General shell functions

# setenv for csh junkies (including tset)
setenv() { export $1=$2 }

# change line of space separated text into text and underscores
# useful for converting JIRA ticket names for directories
function underscore(){
  str=`echo "$*" | tr -s ' ' | tr ' ' '_' | tee >(pbcopy)`
  echo $str
}

# repeat last command with sudo
fucking() {
     LAST_CMD=`fc -nl -1`
     echo sudo $LAST_CMD
     sudo zsh -c $LAST_CMD
}

# remove ssh key for failed login attempt and try again
damnit() {
  LAST_CMD=`fc -nl -1`
  LAST_FIELD=$(echo $LAST_CMD | awk '{print $NF}')
  ssh-keygen -R $LAST_FIELD
  echo ssh $LAST_FIELD
  ssh $LAST_FIELD
}

#
psg () { ps -aef | grep $* | grep -v grep }

# animated table flip
flip() {
  echo;
  echo -en "( º_º）  ┬─┬   \r"; sleep .5;
  echo -en " ( º_º） ┬─┬   \r"; sleep .5;
  echo -en "  ( ºДº）┬─┬   \r"; sleep .5;
  echo -en "  (╯'Д'）╯︵⊏   \r"; sleep .5;
  echo -en "  (╯'□'）╯︵ ⊏  \r"; sleep .5;
  echo     "  (╯°□°）╯︵ ┻━┻"; sleep .5;
}

calc() { awk "BEGIN{ print $* }"; }

rot13() {  # For some reason, rot13 pops up everywhere
    if [ $# -eq 0 ]; then
        tr '[a-m][n-z][A-M][N-Z]' '[n-z][a-m][N-Z][A-M]'
    else
        echo $* | tr '[a-m][n-z][A-M][N-Z]' '[n-z][a-m][N-Z][A-M]'
    fi
}

# Top 10 most used commands in shell history (TODO update for MacOS)
# Not that useful for zsh where we're not keeping dupe history entries
#top10 () { history | awk '{print $2}' | awk 'BEGIN {FS="|"} {print $1}' | sort | uniq -c | sort -nr | head -10; }

## Extract common archive formats
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1    ;;
            *.tar.gz)    tar xvzf $1    ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xvf $1     ;;
            *.tbz2)      tar xvjf $1    ;;
            *.tgz)       tar xvzf $1    ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# ssh key functions
ssh-del-host() { ssh-keygen -R $@; }  # remove entry from ~/.ssh/known_hosts
ssh-del-all() { ssh-add -D; }                             # delete all ssh keys
#ssh-add-all() { LIST=$(ls $HOME/.ssh/id_* | grep -v '.pub'); ssh-add $LIST; } # add all ssh keys
#ssh-add-work() { ssh-add ${HOME}/.ssh/id_rsa_work; }      # add work key
#ssh-del-work() { ssh-add -d ${HOME}/.ssh/id_rsa_work; }   # delete work key
#ssh-add-home() { ssh-add ${HOME}/.ssh/id_rsa_home; }      # add home github key
#ssh-del-home() { ssh-add -d ${HOME}/.ssh/id_rsa_home; }   # delete home github key
#ssh-vagrant() { ssh -i ${HOME}/.ssh/id_rsa_vagrant -l vagrant $*; } # ssh with explicit vagrant key
ssh-nopub() { ssh -qt -o ControlMaster=no -o pubkeyauthentication=no $@ }
ssh-noid() { ssh -qt -o IdentitiesOnly=yes $@ }

# aws ssh functions
sssh() { AWSIP=$(sed -e 's/ip-//' -e 's/-/./g' <<< "$1"); ssh ${AWSIP} $2 $3 $4 $5 $6 $7 $8 $9 }
assh() { AWSIP=$(awk -F"-" '{print $2"."$3"."$4"."$5}' <<< "$1"); ssh ${AWSIP} $2 $3 $4 $5 $6 $7 $8 $9 }

#greppara: grep by paragraph, http://www.commandlinefu.com/commands/view/4547/
greppara() {
    [ $# -eq 1 ] && perl -00ne "print if /$1/i" || perl -00ne "print if /$1/i" < "$2"
}

# Push ssh authorized_keys to remote host (needs work)
pushkey() {
  if [ -z $1 ]; then
     echo "no host specified"
  else
    KEYCODE=`cat $HOME/.ssh/authorized_keys`
    ssh -q $1 "mkdir -p ~/.ssh && chmod 0700 ~/.ssh && touch ~/.ssh/authorized_keys && echo "$KEYCODE" >> ~/.ssh/authorized_keys && chmod 644 ~/.ssh/authorized_keys"
  fi
}
