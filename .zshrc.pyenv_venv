################
#  pyenv init  #
################
if [[ -f ${HOME}/NO_PYENV_VENV ]]; then
    echo ". skipping venv pyenv"

    if [[ -d "${HOME}/.pyenv" ]]
    then
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
        echo ". pyenv virtualenv initialized"
    fi
else
    if [[ -d "${HOME}/.pyenv" ]]; then
         export PYENV_ROOT="$HOME/.pyenv"
         #command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
         export PATH="$PYENV_ROOT/bin:$PATH"
         eval "$(pyenv init - zsh)"
         #eval "$(pyenv virtualenv-init - zsh)" # commenting out doesn't seem to break anything
         echo ". pyenv venv initialized"

         # Functions to manage pyenv venvs
         pyenv_venv() {
             if [[ $# -ne 2 ]]
             then
                 echo "Error: Incorrect number of arguments (2 required)"
                 echo "Usage: $0 python-version venv-name"
                 echo "   ex: $0 3.9.7 mytestvenv"
                 return 0
             fi

             PYVER=$1
             VENV=$2

             # Check for python version
             pyenv versions --bare | grep ${PYVER} > /dev/null
             if [[ "$?" != 0 ]]; then
                 echo "Python version ${PYVER} is not installed, aborting!"
                 return 1
             else
                 mkdir -p ${HOME}/.venvs
                 python_bin="${HOME}/.pyenv/versions/${PYVER}/bin/python"
                 echo "Creating new venv ~/.venvs/${VENV}"
                 ${python_bin} -m venv ${HOME}/.venvs/${VENV}
                 ln -s ${HOME}/.venvs/${VENV} ${HOME}/.pyenv/versions # for emacs
                 source ${HOME}/.venvs/${VENV}/bin/activate
             fi
         }
         alias pyenvVenv=pyenv_venv

         pyenv_activate() {
             # example from pyenv-virtualenv
             # ex: pyenv activate <venv_name>

             if [[ $# -ne 1 || ${1} == "list" || ${1} == "versions" ]]
             then
                 cd ${HOME}/.venvs && ls -d */ | cut -f1 -d'/'
                 return
             else
                 source ${HOME}/.venvs/${1}/bin/activate
                 return
             fi
         }
         alias pyenvActivate=pyenv_activate

         pyenv_uninstall() {
             # example from pyenv-virtualenv
             # ex: pyenv uninstall <venv_name>

             if [[ $# -ne 1 || ${1} == "list" || ${1} == "versions" ]]
             then
                 cd ${HOME}/.venvs && ls -d */ | cut -f1 -d'/'
                 return
             else
                 rm -rf ${HOME}/.venvs/${1}
                 [ ${HOME}/.pyenv/versions/${1} ] && rm ${HOME}/.pyenv/versions/${1}
                 return
             fi
         }
         alias pyenvUninstall=pyenv_uninstall
    fi
fi
