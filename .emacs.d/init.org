# -*- mode: org; fill-column: 78; lexical-binding: t; after-save-hook: (org-babel-tangle); before-save-hook: (delete-trailing-whitespace) -*-
#+PROPERTY: header-args:emacs-lisp :exports code :results none :tangle init.el
#+STARTUP: overview
#+BEGIN_COMMENT
tangle: C-c C-v C-t
#+END_COMMENT

TODO:
- spelling / grammer / syntax
  - flyspell / flymake
  - tried jinx spellcheck, but it hung emacs
- lang:  markdown rust ansible
- doom MacOS fixes
- git-gutter vs diff-hl/vc-gutter
- fix/revisit venv setup
- use-package defer is implied in:
  :commands, :bind, :bind*, :bind-keymap, :bind-keymap*, :mode, or :interpreter
- look into tangling the org file to init.el
  https://www.reddit.com/r/emacs/comments/372nxd/how_to_move_init_to_orgbabel/

* Init
The init.el portion of the init.el/config.org from before

#+begin_src emacs-lisp
;; init.el -*- lexical-binding: t; -*-
; eval: (local-set-key (kbd "C-c i") #'consult-outline); outline-regexp: ";;;";

;; init.el
;; from https://github.com/danielmai/.emacs.d/blob/master/init.el
;; https://www.reddit.com/r/emacs/comments/5d4hqq/using_babel_to_put_your_init_file_in_org/
;; https://www.reddit.com/r/emacs/comments/673wek/emacs_bankruptcy_and_structure/

;; Don't show the startup screen, disable startup msg in scratch
(setq inhibit-startup-message t)
(setq-default initial-scratch-message nil)

;; Set up package
;; Use M-x Package-refresh-contents to reload the list of packages after initial run
(require 'package)
(setq package-archives
  '(("gnu"   . "https://elpa.gnu.org/packages/") ; default package archive
    ("melpa" . "https://melpa.org/packages/")))  ; milkypostman's pkg archive
(package-initialize)

;; Bootstrap use-package
;; Install use-package if it's not already installed.
;; use-package is used to configure the rest of the packages.
;; diminish info : https://github.com/emacsmirror/diminish
(unless (or (package-installed-p 'use-package)
            (package-installed-p 'diminish))
  (package-refresh-contents)
  (package-install 'use-package)
  ;(package-install 'diminish)
)

;; enable use-package profiling (M-x use-package-report)
(setq use-package-compute-statistics t)

;; Allow loading from the package cache
;(defvar package-quickstart)
(setq package-quickstart t)

;; From use-package README
(eval-when-compile
  (require 'use-package))
;(require 'diminish)                ;; if you use :diminish
(require 'bind-key)

;; Load the config (will re-tangle on org file change)
;(org-babel-load-file (concat user-emacs-directory "config.org"))
#+end_src

* Housekeeping
** initialization
#+begin_src emacs-lisp
; -*- lexical-binding: t; eval: (local-set-key (kbd "C-c i") #'consult-outline); outline-regexp: ";;;"; -*-

;;; init.el

; whoami?
(setq
 user-full-name "Douglas Jackson"
 user-mail-address "hpotter@hogworts.edu")

;; more useful frame title that shows either a file or a
;; buffer name (if the buffer isn't visiting a file)
;; commented out to see if its causing emacs 29.1 mac hang
;(setq frame-title-format
;      '((:eval (if (buffer-file-name)
;                   (abbreviate-file-name (buffer-file-name))
;                 "%b"))))

;; Load Customizations if they exist
;; https://lupan.pl/dotemacs/
(setq custom-file "~/Sync/my_homedir_files/emacs.d/custom.el")
(if (file-exists-p custom-file)
    (load custom-file))

;; Add 'info' and 'elisp' to load-path (C-h v load-path RET)
(add-to-list 'Info-additional-directory-list
   "~/Sync/my_homedir_files/emacs.d/info")
(add-to-list 'load-path "~/.emacs.d/elisp/") ;; elisp packages not in pkg mgr

;; Start server if not currently running and in gui
(when window-system
     (load "server")
     (setq server-socket-dir "~/.emacs.d/var/tmp")
     (unless (server-running-p) (server-start)))
#+end_src

** enable disabled functions
#+begin_src emacs-lisp
;;; enable or disable functions

;; Upcase and downcase regions, default also works on inactive region, use dwim
;(put 'upcase-region 'disabled nil)  ; C-x C-u
;(put 'downcase-region 'disabled nil)  ; C-x C-l
(global-unset-key (kbd "C-x C-u")) ; default is `upcase-region'-region'
(global-unset-key (kbd "C-x C-l")) ; default is `downcase-region'
;(global-unset-key (kbd "M-c"))     ; default is `kill-ring-save', didn't work
;(global-set-key (kbd "M-c") #'capitalize-region) ; was M-c
(global-set-key (kbd "C-x C-u") #'upcase-dwim)   ; was M-u
(global-set-key (kbd "C-x C-l") #'downcase-dwim) ; was M-l
;;--
;(bind-key [remap just-one-space] #'cycle-spacing)
;(bind-key [remap upcase-word] #'upcase-dwim)
;(bind-key [remap downcase-word] #'downcase-dwim)
;(bind-key [remap capitalize-word] #'capitalize-dwim)
;(bind-key [remap count-words-region] #'count-words)

;; Restrict buffer editing to a region
;; Text Narrowing commands:
;;   Region: C-x n n, Page: C-x n p
;;   Funct: C-x n p, Widen: C-x n w
;;   Subtree in Org-Mode:   C-x n s
(put 'narrow-to-region 'disabled nil)
(global-unset-key (kbd "C-x n n"))

;; Goal Column, enter C-x C-n, at point to set column that C-n should go to
;; to clear enter C-u C-x C-n
(put 'set-goal-column 'disabled nil)

;; https://www.emacswiki.org/emacs/ZapUpToChar
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)

;; disable electric-indent if active, added in Emacs 24.4
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+end_src

** global key bindings
#+begin_src emacs-lisp
;;; global key bindings

;; Show a summery of all registers with content
(global-set-key (kbd "C-x r v") 'list-registers)

;; Move through windows in reverse order of (other-window), C-x o
(global-set-key (kbd "C-x O") 'previous-multiframe-window)

;; Invoke M-x without the Alt key (from Steve Yegge's blog)
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
;(global-set-key (kbd "C-c C-m") 'execute-extended-command) ; remapped by org to org-ctrl-c-ret
#+end_src

** global settings
#+begin_src emacs-lisp
;;; global settings

;; Compilation buffer scrolls to follow output.
;; set to first-error to stop when the first error appers and set point
(setq compilation-scroll-output t)

;; Enable line-numbers-mode for all programming languages
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; enable delete selection mode, so pasting overwrites selection
(delete-selection-mode +1)

;; add org-roam-directory to safe variables
(add-to-list 'safe-local-variable-values '(org-roam-directory . "."))

;; set default shell to zsh
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)

;; Remove trailing whitespace on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; automatically follow symlinks to files under version control without prompting
(setq vc-follow-symlinks t)

;;; Kill line backwards
;;; http://emacsredux.com/blog/2013/04/08/kill-line-backward/
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))

;;; Ping settings (from net-util.el)
;;; http://www.masteringemacs.org/articles/2011/03/02/network-utilities-emacs/
(defvar ping-program-options)
(setq ping-program-options '("-c" "4"))

;;; Enable whitespace-mode for diff buffers
;;; http://stackoverflow.com/questions/11805584/automatically-enable-whitespace-mode-in-diff-mode
(add-hook 'diff-mode-hook
          (lambda ()
            (whitespace-mode 1)))

;;; Enable holidays in Calendar
(setq mark-holidays-in-calendar t)

;; w/o-man mode (elisp man page formater for systems without 'man')
(defvar woman-show-log)
(defvar woman-cache-filename)
(setq woman-show-log nil)
(autoload 'woman "woman"
  "Decode and browse a Unix man page." t)
(setq woman-cache-filename "~/.emacs.d/var/woman_cache.el")

;;; Make tooltips appear in the echo area (checks if function exists)
(tooltip-mode nil)

;;; Emacs 24.4 and later now include something similar: Rectangle Mark mode. After a region is active, type ‘C-x SPC’ to toggle it on and off.
;;; Use CUA mode for rectangles (C-RET to select, normal emacs keys to copy)
;;; http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html
;(setq cua-rectangle-mark-key (kbd "C-^"))
(global-unset-key "\C-z")
;(setq cua-rectangle-mark-key (kbd "C-z '"))
(setq cua-rectangle-mark-key (kbd "C-z C-SPC"))  ;; instead of Ctrl-Enter
(cua-selection-mode t)
;(setq cua-enable-cua-keys nil)  ;; only for rectangles, keeps (C-c, C-v, C-x).
;(cua-mode t)

;;; Don't create new lines when pressing 'arrow-down key' at end of the buffer
(setq next-line-add-newlines nil)

;;; Fix delete key working as backspace and not forward deleting
;;; (This only worked in window mode, not terminal. C-d works in both)
(when window-system (normal-erase-is-backspace-mode 1))

;;; Alias to change apropos to ap
(defalias 'ap 'apropos)

;;; hl-line: highlight the current line
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t)) ;; turn it on for all modes by default

;;; Make text mode default major mode with auto-fill enabled
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode) ;replaces longlines in 23

;;; Auto-scroll in *Compilation* buffer
(setq compilation-scroll-output t)

;;; make Emacs always indent using SPC characters and never TABs
;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Just-Spaces.html
(setq-default indent-tabs-mode nil)

;;; "y or n" instead of "yes or no", use-short-answers added in Emacs 28.1
;; if odd pop-up vs minibuffer prompt issues, examine us-dialog-box?
;(fset 'yes-or-no-p 'y-or-n-p) ;emacs < 28
(setq use-short-answers t)

;;; Ask before quitting the last Emacs frame
(setq confirm-kill-emacs 'y-or-n-p)

;;; Highlight regions and add special behaviors to regions.
;;; "C-h d transient" for more info.  transient-mark-mode is a toggle.
;;; also in Emacs 22 and greater, C-SPC twice to temp enable transient mark
;(setq transient-mark-mode nil)
(setq transient-mark-mode t)

;;; Display line and column numbers in the mode line
(setq line-number-mode    t
      column-number-mode  t)

;;; Stop blinking cursor
(blink-cursor-mode 0)

;;; Explicitly show the end of a buffer (indicated on left fringe of window)
(set-default 'indicate-empty-lines t)

;;; Line-wrapping
(set-default 'fill-column 78)

;; Don't truncate lines
(setq truncate-lines t
      truncate-partial-width-windows nil)

;; Create new scratch buffer if needed
(run-with-idle-timer 1 t
    (lambda () (get-buffer-create "*scratch*")))

;; allow scroll-down/up-command to move point to buffer end/beginning
;(setq scroll-error-top-bottom 'true)

;; New json-mode
;(setq auto-mode-alist (cons '("\\.json\\'" . js-mode) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.json\\'" . json-mode)  ; note these are encapsulated in a '() list
		("\\.jsn\\'" . json-mode))
	       auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bookmarks
;;    ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
;;    ‘C-x r b’ – jump to a bookmark
;;    ‘C-x r l’ – list your bookmarks
;;    ‘M-x bookmark-delete’ – delete a bookmark by name
(setq
  bookmark-default-file "~/.emacs.d/var/bookmarks" ;; bookmark file location
  bookmark-save-flag 1)                   ;; autosave each change)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

** functions
#+begin_src emacs-lisp
;;; function definations
;; ---------------------------------------------------------------------------
;; https://www.reddit.com/r/emacs/comments/un4wf8/weekly_tips_tricks_c_thread/
;; toggle between two most recent buffers in a window
(defun back-and-forth-buffer ()
	(interactive)
	(switch-to-buffer (other-buffer (current-buffer))))
(global-set-key (kbd "<f7>") 'back-and-forth-buffer)

;; ---------------------------------------------------------------------------
;; https://gist.github.com/mwfogleman/95cc60c87a9323876c6c
;; http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
(defun narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((equal major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))
(global-set-key (kbd "C-x n n") 'narrow-or-widen-dwim)  ; was: C-c n then C-c x then C-x n n

;; I bind this key to C-c n, using the bind-key function that comes with use-package.
;(bind-key "C-c n" 'narrow-or-widen-dwim)
;; I also bind it to C-x t n, using Artur Malabarba's toggle map idea:
;; http:://www.endlessparentheses.com/the-toggle-map-and-wizardry.html

;; ---------------------------------------------------------------------------
;; Move lines up or down (can't easily use C-S on MacOS)
;; http://whattheemacsd.com//editing-defuns.el-02.html
(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines -1))
    (move-to-column col)))

;(global-set-key (kbd "<C-S-down>") 'move-line-down)
;(global-set-key (kbd "<C-S-up>") 'move-line-up)
(global-set-key (kbd "<M-S-down>") 'move-line-down)
(global-set-key (kbd "<M-S-up>") 'move-line-up)

;; ---------------------------------------------------------------------------
;; Match Paren / based on the vim command using %
;; emacs for vi users: http://grok2.tripod.com
(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

;; ---------------------------------------------------------------------------
(defun intelligent-close ()
  "quit a frame the same way no matter what kind of frame you are on.

This method, when bound to C-x C-c, allows you to close an emacs frame the
same way, whether it's the sole window you have open, or whether it's
a \"child\" frame of a \"parent\" frame.  If you're like me, and use emacs in
a windowing environment, you probably have lots of frames open at any given
time.  Well, it's a pain to remember to do Ctrl-x 5 0 to dispose of a child
frame, and to remember to do C-x C-x to close the main frame (and if you're
not careful, doing so will take all the child frames away with it).  This
is my solution to that: an intelligent close-frame operation that works in
all cases (even in an emacs -nw session).

Stolen from http://www.dotemacs.de/dotfiles/BenjaminRutt.emacs.html."
  (interactive)
  (if (eq (car (visible-frame-list)) (selected-frame))
      ;;for parent/master frame...
      (if (> (length (visible-frame-list)) 1)
          ;;close a parent with children present
          (delete-frame (selected-frame))
        ;;close a parent with no children present
        (save-buffers-kill-emacs))
    ;;close a child frame
    (delete-frame (selected-frame))))
(global-set-key "\C-x\C-c" 'intelligent-close) ;forward reference

;; ---------------------------------------------------------------------------
;; It’s useful to have a scratch buffer around, and more useful to have a key chord to switch to it.
(defun switch-to-scratch-buffer ()
  "Switch to the current session's scratch buffer."
  (interactive)
  (switch-to-buffer "*scratch*"))
(bind-key "C-c f s" #'switch-to-scratch-buffer)
#+end_src

** daily-log
#+begin_src emacs-lisp
;;; -- daily log -

(defun daily-log ()
  "Automatically opens my daily log file and positions cursor at end of
last sentence."
  (interactive)
  ;(diary)
  (find-file "~/org/DailyLogs/+current") ;symlink to current log
  (goto-char (point-max))  ;go to the maximum accessible value of point
  (search-backward "* Notes") ;search to Notes section first to bypass notes
  (if (re-search-backward "[.!?]") ;search for punctuation from end of file
      (forward-char 1))
  )
(global-set-key (kbd "<f9>") 'daily-log)

;; ---------------------------------------------------------------------------
;(diary)

;; Email 1
;; I have been using a simple system for writing notes day by day.  Kind of
;; like a diary.  It's really very unsophisticated but helpful.  It will allow
;; you to make notes into a template file.  Weeks, Months (etc...) later, you
;; can refer to them.
;;
;; For those who have never seen it
;; http://aonws01/unix-admin/Daily_Logs/Jerry_Sievers/
;;
;; Many of you new guys' questions to me have been answered from these notes
;; (eg, license keys info, who's who and so forth).
;;
;; John Sconiers asked about this and I set him up with it.  Whole procedure
;; takes only a few minutes to install and probably about fifteen minutes per
;; day to keep up to date.  An investment in time that pays off later.  Other
;; admins who have left Aon used this and liked it too.
;;
;; It also comes with a CGI program which, if your home directory is
;; accessible to aonws01, can allow others to browse your diary (I hear
;; cheering and booing...)
;;
;; Please let me know.  It would be nice to have everyone using this thing at
;; least minimally.

;; Email 2
;; Chris, I have installed the package in your home directory.  Files are in
;; Aon/DailyLogs.  The current log has a symbolic link named +Current.  You
;; also have an alias 'diary' which you can type at the shell.  Doing so will
;; invoke vi on the +Current file and position the cursor on the very last '.'
;; character in the file.  I have added the $HOME/bin directory to your path
;; and created one cron job to stamp the 'monday' file weekly.
;;
;; You should run the command 'new-daily-log' once per week to start a new
;; file.  Optionally, the previous file can be emailed to the destination of
;; your choice.  See the Aon/DailyLogs/.config file for details.
;;
;; Please call if you have any questions.
#+end_src

* Utilities
** helpful
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
https://github.com/Wilfred/helpful

helpful-key erroring on TAB

#+begin_src emacs-lisp
;;; helpful
;(use-package helpful
;  :ensure t
;  :defer t
;  :bind
;  (("C-h f" . helpful-callable)
;   ("C-h v" . helpful-variable)
;   ("C-h k" . helpful-key)
;  ;;
;  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
;  ;; for this in lisp modes.
;  ;("C-c C-d" . helpful-at-point)  # keys already bound to Cal Deadline
;
;  ;; Look up *F*unctions (excludes macros).
;  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
;  ;; already links to the manual, if a function is referenced there.
;  ("C-h F" . helpful-function)
;
;  ;; Look up *C*ommands.
;  ;;
;  ;; By default, C-h C is bound to describe `describe-coding-system'. I
;  ;; don't find this very useful, but it's frequently useful to only
;  ;; look at interactive functions.
;  ("C-h C" . helpful-command)
;))
#+end_src

** recentf
a minor mode that builds a list of recently opened files
https://www.emacswiki.org/emacs/RecentFiles

NOTE: wasn't able to move the savefile to any other directory
#+begin_src emacs-lisp
;;; recentf
(use-package recentf
  ;:after consult
  ;:bind ("C-x C-r" . recentf-open-files) ;moved binding to consult
  :config
  (setq recentf-save-file "~/.emacs.d/recentf"
	;recentf-save-file (expand-file-name "recentf" "~/.emacs.d/")
	recentf-max-saved-items 500
	recentf-max-menu-items 15
	;; disable recentf-cleanup on Emacs start, because it can cause
	;; problems with remote files
	recentf-auto-cleanup 'never)
  ;(add-to-list 'recentf-exclude '(".*-autoloads\\.el\\'"
  ;				  "[/\\]\\.elpa/"))
  :init
  (recentf-mode 1)
)
#+end_src

** projectile

Projectile - a project interaction library for Emacs
https://github.com/bbatsov/projectile

Docs: https://docs.projectile.mx/projectile/index.html

#+begin_src emacs-lisp
;;; projectile
(use-package projectile
  :ensure t
  :defer t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map))
  :custom
  (projectile-known-projects-file
       (expand-file-name "projectile-bookmarks.eld" "var/"))
)
#+end_src

* OS
#+begin_src text
(:if IS-MAC macos)  ; improve compatibility with macOS
#+end_src

** MacOS
#+begin_src emacs-lisp
;;; === macOS specific settings
(use-package emacs
  :if (eq system-type 'darwin)
  :config
  ;(setq mac-command-modifier 'meta
  ;      mac-option-modifier 'alt
  ;      mac-right-option-modifier 'super)

  ;; enable srgb mode if compiled in
  ;(setq ns-use-srgb-colorspace t)
  ;; or turn off if causing problems
  ;(setq ns-use-srgb-colorspace nil)

  ;; set keys for Apple keyboard, for emacs in OS X
  (setq mac-command-modifier 'meta) ; make cmd key do Meta
  (setq mac-option-modifier 'super) ; make opt key do Super
  (setq mac-control-modifier 'control) ; make Control key do Control
  ;(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper

  ;; force mac modifier keys
  ;(setq mac-command-modifier	 'super
  ;      ns-command-modifier	 'super
  ;      mac-option-modifier	 'meta
  ;      ns-option-modifier	 'meta
  ;      mac-right-option-modifier 'meta
  ;      ns-right-option-modifier	 'meta)

  ;; Use macOS default shortscuts for Cut/Copy/Paste/Select All
  ;; https://www.emacswiki.org/emacs/EmacsForMacOS#h5o-37
  (global-set-key (kbd "M-c") 'kill-ring-save) ; ⌘-c = Copy
  ;(global-set-key (kbd "M-x") 'kill-region) ; ⌘-x = Cut (interferes with term extended cmd)
  ;(global-set-key (kbd "M-v") 'yank) ; ⌘-v = Paste (interfers with cua-scroll-down)
  (global-set-key (kbd "M-a") 'mark-whole-buffer) ; ⌘-a = Select all
  (global-set-key (kbd "M-z") 'undo) ; ⌘-z = Undo
  (global-set-key (kbd "s-x") 'execute-extended-command) ; Replace ≈ with whatever your option-x produces

  ;; mac 'ls' doesn't support --dired
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))

  ;; Use meta +/- to change text size
  (bind-key "M-+" 'text-scale-increase)
  (bind-key "M-=" 'text-scale-increase)
  (bind-key "M--" 'text-scale-decrease)

  ;; This is copied from
  ;; https://zzamboni.org/post/my-emacs-configuration-with-commentary/
  (defun my/text-scale-reset ()
    "Reset text-scale to 0."
    (interactive)
    (text-scale-set 0))
  (bind-key "M-g 0" 'my/text-scale-reset)

  ;;; set font size to 15, overriding default 12
  ;; M-x describe-font:
  ;; Monaco:pixelsize=12:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
  ;; M-: (face-attribute 'default :font)
  ;; #<font-object "-*-Monaco-normal-normal-normal-*-15-*-*-*-m-0-iso10646-1">
  ;;(set-face-attribute 'default (selected-frame) :height 150)
  ;;(set-face-attribute 'default nil :height 150)
  (set-frame-font "Monaco 15" nil t)
  ;(set-frame-font "Menlo 15" nil t) ; fit more lines per frame

  ;; Testing jetbrains mono font, not sure I like it
  ;; https://www.jetbrains.com/lp/mono/
  ;; "JetBrains Mono-13:spacing=100"
  ;;(set-face-attribute 'default nil :font "JetBrains Mono-15" :height 150)
  ;(set-frame-font "JetBrains Mono 15" nil t)

  ;; Osx-trash
  ;; Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.
  ;; https://github.com/lunaryorn/osx-trash.el
  ;(use-package osx-trash
  ;   :ensure t
  ;   :config
  ;   (setq delete-by-moving-to-trash t)
  ;   (osx-trash-setup)
  ;)

  ;; Disable railwaycat's tab bar
  ;; https://github.com/railwaycat/homebrew-emacsmacport/issues/123
  (defvar mac-frame-tabbing)
  (setq mac-frame-tabbing nil)

  ;; Don't open up new frames for files dropped on icon, use active frame
  (defvar ns-pop-up-frames)
  (setq ns-pop-up-frames nil)

  ;; Drag and drop on the emacs window opens the file in a new buffer instead of
  ;; appending it to the current buffer
  ;; http://stackoverflow.com/questions/3805658/how-to-configure-emacs-drag-and-drop-to-open-instead-of-append-on-osx
  (if (fboundp 'ns-find-file)
      (global-set-key [ns-drag-file] 'ns-find-file))

  ;; Move deleted files to the System's trash can
  ;; set trash-directory otherwise uses freedesktop.org-style
  (setq trash-directory "~/.Trash")
  (setq delete-by-moving-to-trash t)

  ;; Macbook Pro has no insert key.
  ;; http://lists.gnu.org/archive/html/help-gnu-emacs/2006-07/msg00220.html
  (global-set-key (kbd "C-c I") (function overwrite-mode))

  ;; Open up URLs in mac browser
  (setq browse-url-browser-function 'browse-url-default-macosx-browser)
  ; (setq browse-url-browser-function 'browse-url-default-windows-browser)

  ;; Copy and paste into Emacs Terminal
  ;; stack overflow, pasting text into emacs on Macintosh
  ;; Copy - C-x M-w
  ;; Paste - C-x C-y
  (defun pt-pbpaste ()
    "Paste data from pasteboard."
    (interactive)
    (shell-command-on-region
      (point)
      (if mark-active (mark) (point))
      "pbpaste" nil t))

  (defun pt-pbcopy ()
    "Copy region to pasteboard."
    (interactive)
    (print (mark))
    (when mark-active
      (shell-command-on-region
        (point) (mark) "pbcopy")
      (kill-buffer "*Shell Command Output*")))
  (global-set-key [C-x C-y] 'pt-pbpaste)
  (global-set-key [C-x M-w] 'pt-pbcopy)

  ;; add the missing man page path for woman
  ;; https://www.reddit.com/r/emacs/comments/ig7zzo/weekly_tipstricketc_thread/
  ;(add-to-list 'woman-manpath
  ;	      "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/share/man")
  ;(add-to-list 'woman-manpath
  ;	      "/Applications/Xcode.app/Contents/Developer/usr/share/man")
  ;(add-to-list 'woman-manpath
  ;	      "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/man")

  ;; On a Mac: make Emacs detect if you have light or dark mode enabled system wide.
  ;;If you have two themes, a light one and a dark one, and you want the dark theme by default unless you have light mode enabled, add this to your init.el:

  ;; If we're on a Mac and the file "~/bin/get_dark.osascript" exists
  ;; and it outputs "false", activate light mode. Otherwise activate
  ;; dark mode.
  ;(cond ((and (file-exists-p "~/bin/get_dark.osascript")
  ;	     (string> (shell-command-to-string "command -v osascript") "")
  ;	     (equal "false\n"
  ;		    (shell-command-to-string "osascript ~/bin/get_dark.osascript")))
  ;	(mcj/theme-set-light))
  ;      (t (mcj/theme-set-dark)))

  ;; (mcj/theme-set-light and mcj/theme-set-light are functions that enable the light and the dark theme, respectively).

  ;;~/bin/get_dark.osascript contains the following:
  ;;
  ;;tell application "System Events"
  ;;	  tell appearance preferences
  ;;		get dark mode
  ;;	  end tell
  ;;end tell
)


;A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell
;https://github.com/purcell/exec-path-from-shell
;Needed to find aspell and probably others
(use-package exec-path-from-shell
  :ensure t
  :defer t
  ;:if (memq window-system '(mac ns x))
  :if (memq (window-system) '(mac ns))
  :config
  ;(setq exec-path-from-shell-arguments nil) ; was '("-l"), breaks aspell?
  ;(setq exec-path-from-shell-debug 1)	; enable debugging
  ;(setq exec-path-from-shell--debug 1) ; print msg if debug enabled
  (setq exec-path-from-shell-variables '("PATH" "MANPATH"))
  (exec-path-from-shell-initialize))
#+end_src

** Linux
#+begin_src emacs-lisp
;;; === Linux specific settings
(use-package emacs
  :if (eq system-type 'gnu/linux)
  :config
  (defvar browse-url-browser-function)
  (defvar browse-url-browser-program)

  ;; http://stackoverflow.com/questions/15277172/how-to-make-emacs-open-all-buffers-in-one-window-debian-linux-gnome
  ;(setq pop-up-frames 'graphic-only)
  (setq pop-up-frames nil)

  ;; Open up URLs in browser using gnome-open (errors on bytecompile)
  ;(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "gnome-open")
  (setq browse-url-browser-function 'browse-url-firefox)

  ;; Problems with minibuffer font size display in KDE/Crunchbang/Unity(?), fix explictily set font
  ;; List fonts with M-x descript-font
  ;(set-default-font "Monospace-10")
)
#+end_src

* Completion
#+begin_src text
(company +childframe) ; the ultimate code completion backend
(vertico +icons)      ; the search engine of the future
#+end_src

vertico.el - VERTical Interactive COmpletion
https://github.com/minad/vertico

corfu.el - Completion Overlay Region FUnction
https://github.com/minad/corfu

marginalia.el - Marginalia in the minibuffer
https://github.com/minad/marginalia

consult.el - Consulting completing-read
https://github.com/minad/consult

company-mode - same niche as corfu, staying with corfu for now
Modular in-buffer completion framework for Emacs
https://company-mode.github.io/

NOTE: emacs in a terminal settings to use backspace in minibuffer:
 terminal- Preferences, Profiles, Advanced, check Delete sends C-h
 iTerm- Preferences, Profiles, Keys, Delete sensd ^H

** vertico
vertico.el - VERTical Interactive COmpletion

#+begin_src emacs-lisp
;;; vertico

;; https://config.daviwil.com/emacs
;; add similar behavior to ivy, (doesn't work in cli mode?)
; But... kills entire word when trying to fix one, disabling for backspace in vertico
(defun dw/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
      (backward-kill-word arg)))

;; Enable vertico
(use-package vertico
  :ensure t
  :bind (:map minibuffer-local-map
         ;("<backspace>" . dw/minibuffer-backward-kill) ; works in gui (maybe cli?)
         ("C-h" . dw/minibuffer-backward-kill) ; this works in cli and gui
         ;("M-h" . dw/minibuffer-backward-kill)
         :map vertico-map
         ("C-n" . vertico-next)
         ("C-p" . vertico-previous)
         ("C-v" . vertico-scroll-up)
         ("M-v" . vertico-scroll-down))
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;(setq vertico-scroll-margin 0)
  ;; Show more candidates
  ;(setq vertico-count 20)
  ;; Grow and shrink the Vertico minibuffer
  ;(setq vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;(setq vertico-cycle t)
  )

;; Use the `orderless' completion style.
;; Enable `partial-completion' for files to allow path expansion.
;; You may prefer to use `initials' instead of `partial-completion'.
(use-package orderless
  :ensure t
  ;:defer t
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
        ;;completion-category-overrides '((file (styles . (partial-completion))))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :config
  (setq savehist-file "~/.emacs.d/var/history")
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; Configure directory extension. (Delete word(s) in Vertico path completing)
;; NOTE: doesn't seem to work in the terminal?  Went back to function with C-h.
;(use-package vertico-directory
;  :after vertico
;  :ensure nil
;  ;; More convenient directory navigation commands
;  :bind (:map vertico-map
;              ("RET" . vertico-directory-enter)
;              ("DEL" . vertico-directory-delete-char)
;              ("M-DEL" . vertico-directory-delete-word))
;  ;; Tidy shadowed file names
;  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** corfu

corfu.el - Completion Overlay Region FUnction
Completions in Regions

#+begin_src emacs-lisp
;;; corfu

(use-package corfu
  :ensure t
  ;:defer t
  ;; Optional customizations
  :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-exclude-modes'.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

;; Use Dabbrev with Corfu! (expand previous word dynamically)
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  ;; Other useful Dabbrev configurations.
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

** marginalia

marginalia.el - Marginalia in the minibuffer
Helpful M-x annotations, think of as a replacement for ivy-rich

#+begin_src emacs-lisp
;;; marginalia

;; Enable rich annotations using the Marginalia package
(use-package marginalia
  :ensure t
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

** consult

consult.el - Consulting completing-read

#+begin_src emacs-lisp
;;; consult

;; Example configuration for Consult
(use-package consult
  :ensure t
  :defer t
  ;:hook (completion-list-mode . consult-preview-at-point-mode)
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ("C-x C-r" . consult-recent-file)         ;; added for recentf
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("C-s" . consult-line)  ;; replace I-search
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
#+end_src

consult-dir - switch directories easily in Emacs
https://github.com/karthink/consult-dir
#+begin_src emacs-lisp
;(use-package consult-dir
;  :ensure t
;  :bind (("C-x C-d" . consult-dir)
;         :map vertico-map
;         ("C-x C-d" . consult-dir)
;         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

* UI
#+begin_src text
doom-dashboard    ; a nifty splash screen for Emacs
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
modeline          ; snazzy, Atom-inspired modeline, plus API
ophints           ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
treemacs          ; a project drawer, like neotree but cooler
(vc-gutter +pretty) ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
workspaces        ; tab emulation, persistence & separate workspaces
#+end_src


** better defaults
A small number of better defaults for Emacs
Some taken from:
  https://github.com/technomancy/better-defaults
  https://git.sr.ht/~technomancy/better-defaults

#+begin_src emacs-lisp
;;; better defaults

(require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

;; When you visit a file, point goes to the last place where it was when you previously visited the same file.
;; https://www.emacswiki.org/emacs/SavePlace
(save-place-mode 1)
;(setq save-place-file (locate-user-emacs-file "places" ".emacs-places"))
(setq save-place-file (concat user-emacs-directory "var/places"))
(setq save-place-forget-unreadable-files nil)

(global-set-key (kbd "M-/") 'hippie-expand)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(savehist-mode 1)

(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      ;mouse-yank-at-point t
      require-final-newline t
      visible-bell t
      delete-old-versions t
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "var/backups"))))

(setq auto-save-list-file-prefix "~/.emacs.d/var/auto-save-list/") ; set prefix for auto-saves
(setq transient-history-file "~/.emacs.d/var/transient/history.el")
#+end_src

** disable all themes
Disable all themes before loading a theme
#+begin_src emacs-lisp
;;; disable themes

(defadvice load-theme (before disable-themes-first activate)
  (fk/disable-all-themes))

(defun fk/disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))
#+end_src

load-theme without annoying confirmation
#+begin_src emacs-lisp
(advice-add 'load-theme
            :around
            (lambda (fn theme &optional no-confirm no-enable)
              (funcall fn theme t)))
#+end_src

** dracula theme
dracula-theme with telephone line status bar
https://draculatheme.com/
https://github.com/dracula/dracula-theme
https://www.reddit.com/r/emacs/comments/he55jl/whats_the_funky_character_on_the_mode_line/

#+begin_src emacs-lisp
;;; dracula theme

(use-package dracula-theme
  :ensure t
  ;:defer t  ;doesn't load when needed
  ;:init
  ;(setq dracula-enlarge-headings nil)
  :config
  ;; Don't change the font size for some headings and titles (default t)
  (setq dracula-enlarge-headings nil)
  (if (display-graphic-p)
      (load-theme 'dracula :no-confirm)	  ; Emacs in own window
    (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
  )
)
#+end_src

** vscode-dark-plus-emacs-theme
Visual Studio Code Dark+ for Emacs
https://github.com/ianyepan/vscode-dark-plus-emacs-theme

#+begin_src emacs-lisp
;(use-package vscode-dark-plus-theme
;  :ensure t
;  :config
;  ;; Remove the border around the TODO word on org-mode files
;  ;(setq vscode-dark-plus-box-org-todo nil)
;  ;; Do not set different heights for some org faces
;  ;(setq vscode-dark-plus-scale-org-faces nil)
;  ;; Avoid inverting hl-todo face
;  ;(setq vscode-dark-plus-invert-hl-todo nil)
;  ;; Configure current line highlighting style (works best with Emacs 28 or newer)
;  ;(setq vscode-dark-plus-render-line-highlight 'line)
;  (load-theme 'vscode-dark-plus t))
#+end_src

** all-the-icons
All-the-icons
https://github.com/domtronn/all-the-icons.el
NOTE: Install the fonts as well: M-x all-the-icons-install-fonts

#+begin_src emacs-lisp
;(use-package all-the-icons
;  :ensure t)
#+end_src

** nerd-icons
nerd-icons.el - A Library for Nerd Font icons
https://github.com/rainstormstudio/nerd-icons.el#installing-fonts
To finish, run: M-x nerd-icons-install-fonts
# Successfully installed ‘nerd-icons’ fonts to ‘/Users/djackson/Library/Fonts

#+begin_src emacs-lisp
;;; nerd icons

(use-package nerd-icons
  :ensure t
  ;:defer t
  :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  (nerd-icons-font-family "Symbols Nerd Font Mono")
)
#+end_src

** doom-modeline
A fancy and fast mode-line inspired by minimalism design.
https://seagle0128.github.io/doom-modeline/
NOTE: Run (all-the-icons-install-fonts) one time after installing

#+begin_src emacs-lisp
;;; doom modline

(use-package doom-modeline
  :ensure t
  ;:defer t
  :hook (after-init . doom-modeline-mode)
  :config
  ;; Fix? for Height below 25 not working anymore #187
  ;; https://github.com/seagle0128/doom-modeline/issues/187
  (defun my-doom-modeline--font-height ()
    "Calculate the actual char height of the mode-line."
    (+ (frame-char-height) 1))
  (advice-add #'doom-modeline--font-height :override #'my-doom-modeline--font-height)
)
#+end_src
** treemacs
Treemacs - a tree layout file explorer for Emacs
https://github.com/Alexander-Miller/treemacs

#+begin_src emacs-lisp
;;; treemacs

(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t
  :defer t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t
  :defer t)

;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
;  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
;  :ensure t
;  :config (treemacs-set-scope-type 'Perspectives))

;(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
;  :after (treemacs)
;  :ensure t
;  :config (treemacs-set-scope-type 'Tabs))

;; If you prefer to expand/collapse nodes with a single mouse click you can also use treemacs-single-click-expand-action:
(with-eval-after-load 'treemacs
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))
#+end_src

* Editor
#+begin_src text
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
multiple-cursors  ; editing in many places at once
snippets          ; my elves. They type so I don't have to
#+end_src

** multiple-cursors

multiple-cursors - https://github.com/magnars/multiple-cursors.el

Multiple Cursors hydra
https://github.com/abo-abo/hydra/wiki/multiple-cursors

#+begin_src emacs-lisp
;;; multiple cursors

(use-package multiple-cursors
  :ensure t
  :defer t)

;; mc/num-cursors is not autoloaded
;;(require 'multiple-cursors)

(global-set-key
     (kbd "C-x r a")
     (defhydra hydra-multiple-cursors (:hint nil)
"
     ^Up^            ^Down^        ^Miscellaneous^
----------------------------------------------
[_p_]     Previous  [_n_]     Next      [_l_] Edit lines
[_P_]     Skip      [_N_]     Skip      [_a_] Mark all
[_M-p_]   Unmark    [_M-n_]   Unmark
[_C-p_]   Prev word [_C-n_]   Next word [_q_] Quit
"
  ("l" mc/edit-lines "lines" :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("C-p" mc/mark-prev-word-like-this)
  ("C-n" mc/mark-next-word-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("q" nil)
  ))
#+end_src

* Emacs
#+begin_src text
dired             ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

** dired-x
https://www.gnu.org/software/emacs/manual/dired-x.html
https://www.emacswiki.org/emacs/DiredExtra#Dired_X
provides extra functionality for Dired Mode.

Hide file detail toggle `(`

OSX/BSD ls doesn't sort directories first, ls-lisp can
#+begin_src emacs-lisp
;;; dired-x

;; Make clicking on files in Dired buffers open in the current window:
;; (This works thanks to mouse-1-click-follows-link.)
;(define-key dired-mode-map [mouse-2] #'dired-mouse-find-file)

(use-package ls-lisp
  :custom
  ;(ls-lisp-emulation 'MacOS)
  (ls-lisp-ignore-case t)
  (ls-lisp-verbosity nil)
  (ls-lisp-dirs-first t)
  (ls-lisp-use-insert-directory-program nil)
)

(use-package dired-x
  :bind ("C-x C-j"   . dired-jump)
	("C-x 4 C-j" . dired-jump-other-window)
  :config
     ;; on macOS, ls doesn't support --dired option linux does
     (when (string= system-type "darwin")
       (setq dired-use-ls-dired nil))
     (setq-default dired-omit-files-p t)
     (setq dired-listing-switches "-alhv")
     ;(setq dired-use-ls-dired nil)
     ;(setq dired-listing-switches "-agho --group-directories-first") ; errors
     ;(define-key dired-mode-map (kbd "/") #'dired-narrow-fuzzy) ; requires dired-hacks
     (define-key dired-mode-map (kbd "e") #'read-only-mode)

     ;; omit-mode
     (setq dired-omit-files "^\\.\\|^#.#$\\|.~$") ; omit dot and backup files
     (define-key dired-mode-map (kbd "h") #'dired-omit-mode) ; overriding h:describe-mode
     (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))) ; start in omit-mode

     ;; Auto-refresh dired on file change
     (add-hook 'dired-mode-hook 'auto-revert-mode)

     ;; disable line wrapping in dired mode
     (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))

     ;; enable side-by-side dired buffer targets
     ;; Split your window, split-window-vertically & go to another dired directory.
     ;; When you will press C to copy, the other dir in the split pane will be
     ;; default destination.
     (setq dired-dwim-target t) ;; suggest copying/moving to other dired buffer in split view

     ;; Dired functions (find-alternate 'a' reuses dired buffer)
     (put 'dired-find-alternate-file 'disabled nil)
)
#+end_src

dired-launch
https://github.com/thomp/dired-launch
#+begin_src emacs-lisp
(use-package dired-launch
  :ensure t
  :defer t
  :hook
  (dired-mode . dired-launch-mode))
#+end_src

all-the-icons-dired
This adds dired support to all-the-icons.
https://github.com/jtbm37/all-the-icons-dired

Plus the fix for sub-directories?
https://www.reddit.com/r/emacs/comments/imy9f1/all_the_icons_dired_subtree/

Disabled on remote directories for now due to tramp slowdown issues

#+begin_src emacs-lisp
;(use-package all-the-icons-dired
;  :ensure t
;  :config
;  ;(if window-system
;  ;  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
;  (add-hook 'dired-mode-hook
;            (lambda ()
;              (interactive)
;              (unless (file-remote-p default-directory)
;                (all-the-icons-dired-mode))))
;)
#+end_src

** which-key
Emacs package that displays available keybindings in popup
https://github.com/justbur/emacs-which-key

Paging: C-h
    Cycle through the pages forward with n (or C-n)
    Cycle backwards with p (or C-p)
    Undo the last entered key (!) with u (or C-u)
    Call the default command bound to C-h, usually describe-prefix-bindings, with h (or C-h)

#+begin_src emacs-lisp
;;; which-key

(use-package which-key
  :ensure t
  :defer t
  :init (which-key-mode)
  :config
  ;(setq which-key-allow-imprecise-window-fit nil)
  ;(setq which-key-setup-side-window-bottom t) ; Default
  (setq which-key-idle-delay 1.0
        which-key-popup-type 'side-window
        which-key-side-window-location 'bottom
        which-key-side-window-max-height 0.50
        which-key-show-remaining-keys t)
)
#+end_src

** ibuffer
https://www.emacswiki.org/emacs/IbufferMode
ibuffer - *Nice* buffer switching

Search all marked buffers
  ‘M-s a C-s’ - Do incremental search in the marked buffers.
  ‘M-s a C-M-s’ - Isearch for regexp in the marked buffers.
  ‘U’ - Replace by regexp in each of the marked buffers.
  ‘Q’ - Query replace in each of the marked buffers.
  ‘I’ - As above, with a regular expression.

#+begin_src emacs-lisp
;;; ibuffer

(use-package ibuffer
  :bind ("C-x C-b" . ibuffer) ; replaces electric-buffer-list
  :config
    ;; Don't show empty buffer groups
    (setq ibuffer-show-empty-filter-groups nil)

    ;; work groups for ibuffer
    (setq ibuffer-saved-filter-groups
          '(("default"
             ("version control" (or (mode . svn-status-mode)
                       (mode . svn-log-edit-mode)
                       (name . "^\\*svn-")
                       (name . "^\\*vc\\*$")
                       (name . "^\\*Annotate")
                       (name . "^\\*vc-")
                       (name . "^\\*git-")
                       (name . "^\\*magit")))
             ("emacs" (or (name . "^\\*scratch\\*$")
                          (name . "^\\*Messages\\*$")
                          (name . "^TAGS\\(<[0-9]+>\\)?$")
                          (name . "^\\*info\\*$")
                          (name . "^\\*Occur\\*$")
                          (name . "^\\*grep\\*$")
                          (name . "^\\*Compile-Log\\*$")
                          (name . "^\\*Backtrace\\*$")
                          (name . "^\\*Process List\\*$")
                          (name . "^\\*gud\\*$")
                          (name . "^\\*Man")
                          (name . "^\\*WoMan")
                          (name . "^\\*Kill Ring\\*$")
                          (name . "^\\*Completions\\*$")
                          (name . "^\\*tramp")
                          (name . "^\\*shell\\*$")
                          (name . "^\\*compilation\\*$")))
             ("Helm" (or (name . "\*helm\*")))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")))
             ("emacs-source" (or (mode . emacs-lisp-mode)
                                 (filename . "/Applications/Emacs.app")
                                 (filename . "/bin/emacs")))
             ("emacs-config" (or (filename . ".emacs.d")
                                 (filename . "emacs-config")))
            ("org" (or (name . "^\\*org-")
                        (name . "^\\*Org")
                        (mode . org-mode)
                        (mode . muse-mode)
                        (name . "^\\*Calendar\\*$")
                        (name . "^+current$")
                        (name . "^diary$")
                        (name . "^\\*Agenda")))
             ("latex" (or (mode . latex-mode)
                          (mode . LaTeX-mode)
                          (mode . bibtex-mode)
                          (mode . reftex-mode)))
             ("dired" (or (mode . dired-mode)))
             ("perl" (mode . cperl-mode))
             ("erc" (mode . erc-mode))
             ("shell" (or (mode . shell-mode)
                            (name . "^\\*terminal\\*$")
                            (name . "^\\*ansi-term\\*$")
                            (name . "^\\*shell\\*$")
                            (name . "^\\*eshell\\*$")))
             ("gnus" (or (name . "^\\*gnus trace\\*$")
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble"))))))

    ;; Order the groups so the order is : [Default], [agenda], [emacs]
    (defadvice ibuffer-generate-filter-groups (after reverse-ibuffer-groups ()
                                                     activate)
      (setq ad-return-value (nreverse ad-return-value)))

    ;; Hide the following buffers
    ;;(setq ibuffer-never-show-predicates
    ;;      (list "\\*Completions\\*"
    ;;            "\\*vc\\*"))

    ;; Enable ibuffer expert mode, don't prompt on buffer deletes
    (setq ibuffer-expert t)

    ;; Load the 'work' group, can set to load groups by location
    ;; ibuffer-auto-mode is a minor mode that automatically keeps the buffer
    ;; list up to date. I turn it on in my ibuffer-mode-hook:
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))
)
#+end_src
* Terminal
#+begin_src text
eshell            ; the elisp shell that works everywhere
vterm             ; the best terminal emulation in Emacs
#+end_src

** keymaps terminal (C-c t)
Based on projectile's

#+begin_src emacs-lisp
(defvar term-command-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "v") #'vterm)
    (define-key map (kbd "e") #'eshell)
    (define-key map (kbd "m") #'term)
    (define-key map (kbd "a") #'ansi-term)
    (define-key map (kbd "s") #'shell)
    (define-key map (kbd "t") #'eshell-toggle)
    map)
  "Keymap for org-mode commands after `org-keymap-prefix'.")
(fset 'term-command-map term-command-map)
(global-set-key (kbd "C-c t") '("terminals" . term-command-map))

;; test out directory tracking
;(add-hook 'comint-output-filter-functions #'comint-osc-process-output)

#+end_src
** shell
#+begin_src emacs-lisp
(setq explicit-shell-file-name "zsh")
(setq shell-file-name "zsh")
(setq explicit-zsh-args '("--login" "--interactive"))
(defun zsh-shell-mode-setup ()
  (setq-local comint-process-echoes t))
(add-hook 'shell-mode-hook #'zsh-shell-mode-setup)
#+end_src

** eshell

Guide to mastering eshell
https://www.masteringemacs.org/article/complete-guide-mastering-eshell

#+begin_src emacs-lisp
;; Little quality of life improvement if you work with multiple eshell buffers:
(defun eshell-buffer-name ()
  (rename-buffer (concat "*eshell*<" (eshell/pwd) ">") t))
(add-hook 'eshell-directory-change-hook #'eshell-buffer-name)
(add-hook 'eshell-prompt-load-hook #'eshell-buffer-name)

(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (setq eshell-history-size         1000
        eshell-buffer-maximum-lines 1000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :ensure t
  :defer t
  :config
  (eshell-git-prompt-use-theme 'git-radar)
)

(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config
  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("top" "htop" "zsh" "vi" "vim")))
)
#+end_src

** vterm
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm
https://github.com/akermu/emacs-libvterm
https://github.com/akermu/emacs-libvterm/blob/master/README.md

Manual installation guide
#+begin_src text
Prep, add emacs.d/emacs-libvterm to ~/.gitignore

Clone the repository:
$ cd .emacs.d/var
$ git clone https://github.com/akermu/emacs-libvterm.git

On Mac, install cmake and libvterm
$ brew install cmake libvterm

Build the module
$ cd ~/.emacs.d/var/emacs-libvterm
$ mkdir -p build
$ cd build
$ cmake ..
$ make

Add to init.el
(use-package vterm
  :load-path  "path/to/emacs-libvterm/")
#+end_src

Notes:
#+begin_src text
Q) What are the vterm's equivalents of term-line-mode C-c C-j and term-char-mode C-c C-k?
A) It's C-c C-t to toggle vterm-copy-mode.
#+end_src

#+begin_src emacs-lisp
;; from ChatGTP
(use-package vterm
  :ensure t
  :defer t
  :commands vterm
  ;:bind
  ;("C-c t v" . vterm)
  :config
  ;; Enable mouse support in vterm
  (add-hook 'vterm-mode-hook #'(lambda () (setq-local mouse-autoselect-window nil)))
  ;; Set the buffer name to show the shell name
  (setq vterm-buffer-name-string "vterm %s")
  ;; Enable UTF-8 support in vterm
  (setq vterm-encoding-system 'utf-8)
  ;; Set the shell program to use
  (setq vterm-shell "/bin/zsh")
  ;; Set scrollback, default 1000, max is 100000
  (setq vterm-max-scrollback 5000)
  ;;
  ;;
  (setq vterm-always-compile-module t)
  ;(setq vterm-term-environment-variable "eterm-256color")
  (setq vterm-kill-buffer-on-exit t)
  ;(let ((m vterm-mode-map))
  ;  ;; Toggle from term input to emacs buffer (search/copy) mode.
  ;  (define-key m (kbd "C-c C-t") #'vterm-copy-mode)
  ;  (define-key m (kbd "C-c C-l") #'vterm-clear-scrollback))
)
#+end_src

** tramp

Initializing tramp via use-package does't seem to add any value, but does increase startup time

#+begin_src emacs-lisp
;(use-package tramp
;  :init
;  ;; Set default connection method for TRAMP
;  (setq tramp-default-method "sshx"))

(setq tramp-default-method "sshx")
#+end_src

** eshell-toggle
eshell-toggle
https://github.com/4DA/eshell-toggle
#+begin_src emacs-lisp
(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  ;(eshell-toggle-window-side 'bottom)
  (eshell-toggle-init-function #'eshell-toggle-init-vterm)
  ;:quelpa
  ;(eshell-toggle :repo "4DA/eshell-toggle" :fetcher github :version original)
  :config
  (defun eshell-toggle-init-vterm (dir)
    "Init `vterm buffer with DIR."
    (let ((default-directory dir))
      (vterm "new")
      (when eshell-toggle-run-command
        (insert eshell-toggle-run-command)
        (eshell-send-input))))
  ;:bind
  ;("C-t z" . eshell-toggle)
)
#+end_src

* Tools
#+begin_src text
:tools - from doom emacs
ansible
docker
(eval +overlay)     ; run code, run (also, repls)
lookup              ; navigate your code and its documentation
(lsp +eglot)        ; M-x vscode
magit               ; a git porcelain for Emacs
tree-sitter         ; syntax and parsing, sitting in a tree...
#+end_src

keyboard commands
C-x g" . magit-status)
C-x G" . magit-status-with-prefix)
C-x M-g" . magit-dispatch)
C-c M-g" . global-magit-file-mode)

** keymaps versioning (C-c v)
Based on projectile's

vc-<functions> also under C-x v

#+begin_src emacs-lisp
(defvar versioning-command-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "R") '("Git revert file"       . vc-revert))
    (define-key map (kbd "y") '("Kill link to remote"   . +vc/browse-at-remote-kill))
    (define-key map (kbd "Y") '("Kill link to homepage" . +vc/browse-at-remote-kill-homepage))
    (define-key map (kbd "r") '("Git revert hunk"       . +vc-gutter/revert-hunk))
    (define-key map (kbd "s") '("Git stage hunk"        . +vc-gutter/stage-hunk))
    (define-key map (kbd "r") '("Git time machine"      . git-timemachine-toggle))
    (define-key map (kbd "n") '("Jump to next hunk"     . +vc-gutter/next-hunk))
    (define-key map (kbd "p") '("Jump to previous hunk" . +vc-gutter/previous-hunk))
    (define-key map (kbd "/") '("Magit dispatch"        . magit-dispatch))
    (define-key map (kbd ".") '("Magit file dispatch"   . magit-file-dispatch))
    (define-key map (kbd "'") '("Forge dispatch"        . forge-dispatch))
    (define-key map (kbd "g") '("Magit status"          . magit-status))
    (define-key map (kbd "G") '("Magit status here"     . magit-status-here))
    (define-key map (kbd "x") '("Magit file delete"     . magit-file-delete))
    (define-key map (kbd "B") '("Magit blame"           . magit-blame-addition))
    (define-key map (kbd "C") '("Magit clone"           . magit-clone))
    (define-key map (kbd "F") '("Magit fetch"           . magit-fetch))
    (define-key map (kbd "L") '("Magit buffer log"      . magit-log-buffer-file))
    (define-key map (kbd "S") '("Git stage file"        . magit-stage-file))
    (define-key map (kbd "U") '("Git unstage file"      . magit-unstage-file))
    map)
  "Keymap for version commands after `versioning-keymap-prefix'.")
(fset 'versioning-command-map versioning-command-map)
(global-set-key (kbd "C-c v") '("versioning" . versioning-command-map))

    ;; sub-menues (c+create, f+find, l+list, o+open in browser
(defvar vc-find-command-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "f") '("Find file"           . magit-find-file))
    (define-key map (kbd "g") '("Find gitconfig file" . magit-find-git-config-file))
    (define-key map (kbd "c") '("Find commit"         . magit-show-commit))
    (define-key map (kbd "i") '("Find issue"          . forge-visit-issue))
    (define-key map (kbd "p") '("Find pull request"   . forge-visit-pullreq))
    map)
  "Keymap for vc find commands after `vc-find-keymap-prefix'.")
(fset 'vc-find-command-map vc-find-command-map)
(global-set-key (kbd "C-c v f") '("vc-find" . vc-find-command-map))

(defvar vc-open-command-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd ".") '("Browse file or region" . +vc/browse-at-remote))
    (define-key map (kbd "h") '("Browse homepage"       . +vc/browse-at-remote-homepage))
    (define-key map (kbd "r") '("Browse remote"         . forge-browse-remote))
    (define-key map (kbd "c") '("Browse commit"         . forge-browse-commit))
    (define-key map (kbd "i") '("Browse an issue"       . forge-browse-issue))
    (define-key map (kbd "p") '("Browse a pull request" . forge-browse-pullreq))
    (define-key map (kbd "I") '("Browse issues"         . forge-browse-issues))
    (define-key map (kbd "P") '("Browse pull requests"  . forge-browse-pullreqs))
    map)
  "Keymap for vc open commands after `vc-open-keymap-prefix'.")
(fset 'vc-open-command-map vc-open-command-map)
(global-set-key (kbd "C-c v o") '("vc-open" . vc-open-command-map))


(defvar vc-list-command-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "g") '("List gists"          . gist-list))
    (define-key map (kbd "r") '("List repositories"   . magit-list-repositories))
    (define-key map (kbd "s") '("List submodules"     . magit-list-submodules))
    (define-key map (kbd "i") '("List issues"         . forge-list-issues))
    (define-key map (kbd "p") '("List pull requests"  . forge-list-pullreqs))
    (define-key map (kbd "n") '("List notifications"  . forge-list-notifications))
    map)
  "Keymap for vc list commands after `vc-list-keymap-prefix'.")
(fset 'vc-list-command-map vc-list-command-map)
(global-set-key (kbd "C-c v l") '("vc-list" . vc-list-command-map))

(defvar vc-create-command-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "r") '("Initialize repo" . magit-init))
    (define-key map (kbd "R") '("Clone repo"      . magit-clone))
    (define-key map (kbd "c") '("Commit"          . magit-commit-create))
    (define-key map (kbd "f") '("Fixup"           . magit-commit-fixup))
    (define-key map (kbd "i") '("Issue"           . forge-create-issue))
    (define-key map (kbd "p") '("Pull request"    . forge-create-pullreq))
    map)
  "Keymap for vc create commands after `vc-creaet-keymap-prefix'.")
(fset 'vc-create-command-map vc-create-command-map)
(global-set-key (kbd "C-c v c") '("vc-create" . vc-create-command-map))
#+end_src

** magit
It's Magit! A Git porcelain inside Emacs. https://magit.vc
https://github.com/magit/magit

#+begin_src emacs-lisp
;; Fixes for emacs 27
;; Magit Error: Warning (with-editor): Cannot determine a suitable Emacsclient
(setq-default with-editor-emacsclient-executable "emacsclient")

(use-package magit
  :ensure t
  :defer t
  :commands magit
  ;:bind
  ;  (("C-x g" . magit-status)
  ;   ("C-x G" . magit-status-with-prefix)
  ;   ("C-x M-g" . magit-dispatch)
  ;   ("C-c M-g" . global-magit-file-mode))
  :custom
  (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
)
#+end_src

#+begin_src text
PriorOutcome

I often find myself wanting to be able to switch between master and a feature branch in magit quickly:

(defun lw-magit-checkout-last (&optional start-point)
    (interactive)
    (magit-branch-checkout "-" start-point))
(transient-append-suffix 'magit-branch "w"
  '("-" "last branch" lw-magit-checkout-last))

So that C-x g b - switches to the last branch I was on, similar to cd -.
#+end_src

** magit-forge - disabled for testing
forge - Work with Git forges, such as Github and Gitlab, from the comfort of Magit
https://github.com/magit/forge
manual: https://magit.vc/manual/forge/

#+begin_src emacs-lisp
;(use-package forge
;  :ensure f
;  :defer t
;  :after magit)
#+end_src

** diff-hl
diff-hl: https://github.com/dgutov/diff-hl

#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :defer t
  :config
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (diff-hl-mode t)
  ;(global-diff-hl-mode)
)
#+end_src

** smartparens
Smartparens is a minor mode for dealing with pairs in Emacs.
https://github.com/Fuco1/smartparens

NOTE: changed smartparens-global-mode to show-smartparens-global-mode
https://github.com/Fuco1/smartparens/wiki/Show-smartparens-mode

Cheatsheat
https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95

#+begin_src emacs-lisp
;(use-package smartparens
;  :hook (after-init . show-smartparens-global-mode)
;  :config (require 'smartparens-config)
;    (add-hook 'python-mode-hook #'smartparens-mode)
;)

(use-package smartparens
  :ensure t
  :defer t
  :hook
  (prog-mode . smartparens-mode)
  (org-mode . smartparens-mode)
)
#+end_src

** git-timemachine
Copied file to elisp directory
https://github.com/emacsmirror/git-timemachine

#+begin_src text
Usage

Visit a git-controlled file and issue M-x git-timemachine (or bind it to a keybinding of your choice). If you just need to toggle the time machine you can use M-x git-timemachine-toggle.

Use the following keys to navigate historic version of the file
- p Visit previous historic version
- n Visit next historic version
- w Copy the abbreviated hash of the current historic version
- W Copy the full hash of the current historic version
- g Goto nth revision
- t Goto revision by selected commit message
- q Exit the time machine.
- b Run magit-blame on the currently visited revision (if magit available).
- c Show current commit using magit (if magit available).
#+end_src

#+begin_src emacs-lisp
(use-package git-timemachine
  :defer t)
#+end_src

** tree-sitter - tbd

For Emacs 29
https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
https://www.reddit.com/r/emacs/comments/zbpa42/how_to_use_emacs_29_treesitter/

For Emacs 28
https://github.com/ubolonton/tree-sitter
https://github.com/emacs-tree-sitter/elisp-tree-sitter

* Lang
#+begin_src text
emacs-lisp        ; drown in parentheses
json              ; At least it ain't XML
latex             ; writing papers in Emacs has never been so fun
markdown          ; writing docs for people to ignore
(org +roam2) ; organize your plain life in plain text
(python +lsp +pyenv) ; beautiful is better than ugly
sh                ; she sells {ba,z,fi}sh shells on the C xor
yaml              ; JSON, but readable
#+end_src

Look at this for info about keybinds
https://www.reddit.com/r/emacs/comments/n1qyxt/how_to_set_prefix_names_to_appear_with_whichkey/

** keymaps org (C-c n)
Based on projectile's

#+begin_src emacs-lisp
(defvar org-command-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "l") #'org-store-link)
    (define-key map (kbd "a") #'org-agenda)
    (define-key map (kbd "c") #'org-capture)
    (define-key map (kbd "o") #'org-info)
    (define-key map (kbd "b") #'org-switchb) ; switch between org buffers
    map)
  "Keymap for org-mode commands after `org-keymap-prefix'.")
(fset 'org-command-map org-command-map)
(global-set-key (kbd "C-c n") '("org notes" . org-command-map))

(defvar org-roam-command-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "l") #'org-roam-buffer-toggle)
    (define-key map (kbd "f") #'org-roam-node-find)
    (define-key map (kbd "i") #'org-roam-node-insert)
    (define-key map (kbd "g") #'org-roam-graph)
    (define-key map (kbd "c") #'org-roam-capture)
    (define-key map (kbd "j") #'org-roam-dailies-capture-today)
    (define-key map (kbd "r") #'bms/org-roam-rg-search)
    map)
  "Keymap for org-roam commands after `org-roam-keymap-prefix'.")
(fset 'org-roam-command-map org-roam-command-map)
(global-set-key (kbd "C-c n r") '("org-roam" . org-roam-command-map))
#+end_src

** sh-script
shell-script-mode is a major mode for shell script editing.
https://www.emacswiki.org/emacs/ShMode

#+begin_src emacs-lisp
(use-package sh-script
  :mode (("zshecl" . sh-mode)
         ("\\.zsh\\'" . sh-mode)
         ("\\.sh\\'" . sh-mode))
  :custom
  ;; zsh
  (system-uses-terminfo nil))

(use-package executable
  :hook
  (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

** eglot

eglot - Emacs Polyglot is the Emacs LSP client that stays out of your way
https://github.com/joaotavora/eglot

#+begin_src emacs-lisp
(use-package eglot
  :bind (:map eglot-mode-map
         ("C-c d" . eldoc)
         ("C-c a" . eglot-code-actions)
         ("C-c r" . eglot-rename)))
#+end_src

** tree-sitter
Now included in Emacs 29
Docs: https://emacs-tree-sitter.github.io/
https://github.com/emacs-tree-sitter/elisp-tree-sitter
https://github.com/emacs-tree-sitter/elisp-tree-sitter

treesit-auto
https://github.com/renzmann/treesit-auto
#+begin_src emacs-lisp
(use-package treesit-auto
  :ensure t
  :config
  (setq treesit-auto-install 'prompt)
  (global-treesit-auto-mode)
)
#+end_src

** json, yaml

Removed json-mode and yaml-mode in favor of tree-sitter
json-mode https://github.com/joshwnj/json-mode
yaml-mode https://github.com/yoshiki/yaml-mode

TODO: enable lsp for each type
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.json\\'" . json-ts-mode))
(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-ts-mode))
#+end_src

** hcl-mode

hcl-mode https://github.com/syohex/emacs-hcl-mode
#+begin_src emacs-lisp
(use-package hcl-mode
  :ensure t
  :defer t
  ;:config
  ;(hcl-indent-level 2)
)
#+end_src

** golang
Install golang and gopls lsp on macOS:
$ brew update && brew install golang gopls

Install grammers:
M-x treesit-install-language-grammer

TODO figure out how to indent with treesitter
lastnamebird7 mo. ago
c-ts-mode-indent-offset, c-ts-mode-indent-style, c-ts-mode-indent-defun. Should be what you need to get started.

go-ts-mode-indent-offset 8
go-ts-mode-indent-style  ?
go-ts-mode-indent-defun  ?

#+begin_src emacs-lisp
(use-package go-ts-mode
  :ensure t
  :hook ((go-ts-mode . eglot-ensure)
         ;(go-ts-mode . company-mode)
         (go-ts-mode . corfu-mode)) ;; same niche as company-mode
  :mode ("\\.go\\'" . go-ts-mode)
  :config
  (add-hook 'go-ts-mode-hook
            (lambda()
              (setq go-ts-mode-indent-offset 4)))
)

;(use-package company
;  :ensure t)
#+end_src
** python

Install pylsp
pip install 'python-lsp-server[all]'

Brent's video: https://www.youtube.com/watch?v=SbTzIt6rISg

#+begin_src emacs-lisp
;(add-to-list 'auto-mode-alist '("\\.py\\'" . python-ts-mode))

(use-package python
  :ensure t
  :hook ((python-ts-mode . eglot-ensure)
         ;(go-ts-mode . company-mode)
         (go-ts-mode . corfu-mode)) ;; same niche as company-mode
  :bind (:map python-ts-mode-map
              ("<f5>" . recompile)
              ("<f6>" . eglot-format))
  :mode ("\\.py\\'" . python-ts-mode))

;; requires melpa
;(use-package conda
;  :ensure t
;  :config
;  (setq conda-env-home-directory
;         (expand-file-name "~/mambaforge")))

(use-package highlight-indent-guides
  :ensure t
  :hook (python-ts-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character))
#+end_src

** org
emacs git repos: https://savannah.gnu.org/git/?group=emacs
Installation: https://orgmode.org/org.html#Installation
Manual: https://orgmode.org/org.html

Checked out org git repo and load in early-init.el
$ cd ~/emacs.d/src/
$ git clone https://git.savannah.gnu.org/git/emacs/org-mode.git
$ cd org-mode/
$ make autoloads  (and maybe 'make compile' and 'make doc')

org-contrib repo, now separate from org
git clone https://git.sr.ht/~bzg/org-contrib

ob-python-mode-mode repo, for separate python functionality
git clone https://gitlab.com/jackkamm/ob-python-mode-mode.git

#+begin_src emacs-lisp
;; set calenar start of week to Sunday
(use-package calendar
  :custom
  (calendar-week-start-day 0))

;; Prevent inadvertently edits an the invisible part of the buffer (default: smart)
(setq-default org-catch-invisible-edits 'smart)

;; Set to the location of your Org files on your local system
(setq org-directory "~/org")

;; Open all txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))

;;; Agenda - Agenda window setup (default: reorganize-frame)
(setq org-agenda-window-setup 'current-window) ;; don't kill my window setup

;; Include emacs diary, not needed if using org-anniversary
;(setq org-agenda-include-diary t)

;; Custom agenda commands
;; http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt
(setq org-agenda-custom-commands
'(
("P" "Projects"
              ((tags "PROJECT")))

("H" "Office and Home Lists"
     ((agenda)
          (tags-todo "OFFICE")
          (tags-todo "HOME")
          (tags-todo "COMPUTER")
          (tags-todo "DVD")
          (tags-todo "READING")))

;("D" "Daily Action List"
;     ((agenda "" ((org-agenda-ndays 1)
;                     (org-agenda-sorting-strategy
;                        (quote ((agenda time-up priority-down tag-up))))
;                     (org-deadline-warning-days 0)
;                     ))))

("d" "Do today"
   ;; Show all todos and everything due today.
   ((agenda "" (
                ;; Limits the agenda to a single day
                (org-agenda-span 1)
                ))
    (todo "TODO")))

("D" "Deadline due"
     ((tags-todo "+TODO=\"TODO\"+DEADLINE<=\"<today>\""
                 ((org-agenda-overriding-header "Deadline today")))
      (tags-todo "+TODO=\"TODO\"+DEADLINE=\"\""
                 ((org-agenda-overriding-header "No deadline")))))

))


;;; Capture
;; NOTE:  Fibonacci format: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100
;; Setup default target for notes and a global hotkey for new ones
;; NOTE:  Need org-mode version 6.3.6 or later for this to work
;; http://stackoverflow.com/questions/3622603/org-mode-setup-problem-when-trying-to-use-capture
(setq org-default-notes-file (expand-file-name "~/org/notes.org"))

;; Capture templates - C-c c t
;; Based on Sacha Chua's org-capture-tempaltes
;; http://pages.sachachua.com/.emacs.d/Sacha.html
(defvar dbj/org-basic-task-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-jira-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:URL: %^{URL}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-someday-template "* %^{Task}
:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(setq org-capture-templates
      `(("t" "Tasks" entry
          (file "~/org/inbox.org"), dbj/org-basic-task-template)
          ;(file+headline "~/org/inbox.org" "Tasks"), dbj/org-basic-task-template)

        ("j" "Jira" entry
          (file "~/org/inbox.org"), dbj/org-basic-jira-template)

        ("s" "Someday task" entry
          (file "~/org/someday.org"), dbj/org-basic-someday-template)

        ("r" "Reference information" entry
          (file+headline "~/org/reference.org" "Inbox"))

        ("n" "Notes" entry
          (file+headline "~/org/notes.org"))

        ("o" "Journal" entry
          (file+olp+datetree "~/org/journal.org")
          "* %?\nEntered on %U\n  %i\n  %a")
))

;;; Other
;; When adding new heading below the current heading, the new heading is
;; Placed after the body instead of before it.  C-<RET>
(setq org-insert-heading-respect-content t)

;; Set Todo keywords, same as:
;; Shortcut key:  C-c C-t
;; #+TODO: TODO(t) INPROGRESS(p) WAITING(w) | DONE(d) CANCELED(c)
(setq org-todo-keywords
   '((sequence "TODO(t)" "NEXT(n)" "INPROGRESS(p)" "WAITING(w@/!)" "APPT(a)"
               "|"
               "DONE(d/!)" "CANCELED(c@/!)" "DEFERRED(f)")))

;; Set Tags, same as:
;; #+TAGS: home(h) work(w) @computer(c) @phone(p) errants(e)
(setq org-tag-alist '(("@office" . ?o) ("@home" . ?h) ("computer" . ?c)
                      ("phone" . ?p) ("reading" . ?r)))

;; Prevent C-k from killing whole subtrees and losing work (default: nil)
(setq org-special-ctrl-k t)

;; Fontify code buffers in org, instead of grey text
;; This is especially nice when you open an editing buffer with [Ctrl+c ']
;; to insert code into the #+begin_src ... #+end_src area.
(setq org-src-fontify-natively t)

;; org-refile (C-c C-w) settings from:
;; http://www.mail-archive.com/emacs-orgmode@gnu.org/msg34415.html
;; http://doc.norang.ca/org-mode.html#RefileSetup
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets '((org-agenda-files :maxlevel . 2)
                           (nil :maxlevel . 3)))

; Use full outline paths for refile targets - we file directly with IDO
;(setq org-refile-use-outline-path t)
;;(setq org-refile-use-outline-path 'file)

; Targets complete directly with IDO
;(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

;;; Strike-through finished todos
;; sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))

;; Disable company-mode (word completions) in org using company conf var
;(setq company-global-modes '(not org-mode))

;;; Enable other org-babel languages
(org-babel-do-load-languages
  (quote org-babel-load-languages)
  (quote ((emacs-lisp . t)
          (C . t)         ;C
          ;(R . t)         ;R
          (awk . t)       ;Awk
          ;(calc . t)      ; Emacs Calc
          ;(clojure . t)   ;Clojure
          ;(comint . t)    ;
          ;(core . t)      l
          ;(css . t)       ;CSS
          ;(ditaa . f)     ;ditaa
          ;(dot . t)       ;Graphviz
          (emacs-lisp . t) ;Emacs Lisp
          ;(eshell . t)    ;
          ;(eval . t)      ;
          ;(exp . t)       ;
          ;(forth . t)     ;
          ;(fortran . t)   ;Fortran
          ;(gnuplot . t)   ;requires gnuplot installed
          ;(groovy . t)    ;
          ;(haskell . t)   ;Haskell
          (java . t)      ;Java
          (js . t)        ;Javascript
          ;(julia . t)     ;
          ;(latex . t)     ;LaTeX
          ;(lilypond . t)  ;Lilypond
          ;(lisp . t)      ;Lisp
          ;(lob . t)       ;lob
          ;(lua . t)       ;Lua
          ;(makefile . t)  ;
          ;(matlab . t)    ;MATLAB
          ;(maxima . t)    ;Maxima
          ;(ocaml . t)     ;Objective Caml
          ;(octave . t)    ;octave
          (org . t)       ;Org mode
          (perl . t)      ;Perl
          ;(plantuml . t)  ;Plantuml
          ;(processing . t) ;Processing.js
          (python . t)    ;Python
          ;(ref . t)       ;
          ;(ruby . t)      ;Ruby
          ;(sass . t)      ;Sass
          ;(scheme . t)    ;Scheme
          ;(screen . t)    ;GNU Screen
          (sed . t)       ;Sed
          (shell . t)     ;shell
          (sql . t)       ; SQL
          ;(sqlite .t)     ;SQLite
          ;(table . )      ;
          ;(tangle . t)    ;
)))
#+end_src

** org-roam
Org-roam - A plain-text personal knowledge management system.
https://www.orgroam.com/
https://github.com/org-roam/org-roam

Manual: https://www.orgroam.com/manual.html

Dependencies
- dash
- f
- s
- org
- emacsql
- emacsql-sqlite
- magit-section

NOTE: can use  sub-directories by adding to capture templates, has to exist first
ex. :if-new (file+head "projects/%<%Y%m%d%H%M%S>-${slug}.org" "#+title:

#+begin_src emacs-lisp
;; Set org-roam-directory based on system-name
(if (string-match "\\`lothlorien" (system-name))
    (setq org-roam-directory "~/org-roam-home")
  (setq org-roam-directory "~/org-roam/"))

(use-package org-roam
  :ensure t
  :after org
  :defer t
  :init
  (setq org-roam-v2-ack t)
  :custom
  ;; setup org-roam-daily directory
  ;By default, Org Roam will create daily files under the daily/ subfolder of your org-roam-directory
  (org-roam-completion-everywhere t)
  ;
  (org-roam-db-location "~/.emacs.d/var/org-roam.db")
  (org-roam-index-file "index.org")
  :config
 ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-setup)
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  ;(require 'org-roam-protocol)

  ;;
  ;; Configure default capture template (try without $G)
  ;;
  (setq org-roam-capture-templates
  '(("d" "default" plain "%?"
     :if-new (file+head "%<%Y%m%d$G>-${slug}.org"
                        "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n#+STARTUP: overview\n#+category: ${title}\n#+filetags: \n")
     :unnarrowed t)))

  ;; Configure default dailies capture template, from docs
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+startup: overview\n#+title: %<%Y-%m-%d>\n"))))

  ;;
  ;; Update a field (#+LAST_MODIFIED: ) at save using bulit in time-stamp
  ;; https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321
  ;;
  (add-hook 'org-mode-hook (lambda ()
                           (setq-local time-stamp-active t
                                       time-stamp-line-limit 18
                                       time-stamp-start "^#\\+LAST_MODIFIED: [ \t]*"
                                       time-stamp-end "$"
                                       time-stamp-format "\[%Y-%m-%d %a %H:%M\]")
                           (add-hook 'before-save-hook 'time-stamp nil 'local)))
)

;; Using consult-ripgrep with org-roam for searching notes
;; https://org-roam.discourse.group/t/using-consult-ripgrep-with-org-roam-for-searching-notes/1226
(defun bms/org-roam-rg-search ()
  "Search org-roam directory using consult-ripgrep. With live-preview."
  (interactive)
  (let ((consult-ripgrep-command "rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS"))
    (consult-ripgrep org-roam-directory)))
(global-set-key (kbd "C-c n r r") 'bms/org-roam-rg-search) ;;was C-c rr
#+end_src

* Lang-eglot - disabled

https://www.adventuresinwhy.com/post/eglot/

-- need pyvenv too or auto-virtualenv
https://github.com/marcwebbie/auto-virtualenv
https://github.com/jorgenschaefer/pyvenv

Python Executable Tracker: https://github.com/wyuenho/emacs-pet

** pyvenv

Python virtual environment support for Emacs
https://github.com/jorgenschaefer/pyvenv

https://stackoverflow.com/questions/38535499/how-to-setup-emacs-to-use-a-given-python-virtualenv
So next time, create the virtual environment in the directory you want (I always call them env and I installed it in the project directory)
  python -m venv env
Then open emacs M-x pyvenv-activate RET dir_to_the_environment/env

#+begin_src emacs-lisp
;(use-package pyvenv
;  :ensure t
;  :defer t
;  :config
;  (pyvenv-mode t)
;
;  ;; Set venvs
;  (setenv "WORKON_HOME" "~/.pyenv/versions")
;  (setq pyvenv-workon "emacs-py") ; Set default venv from versions
;  ;(pyvenv-tracking-mode 1)  ; Automatically use pyvenv-workon via dir-locals
;  ;(setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] "))) ;; Show python venv name in modeline
;
;  ;; Set correct Python interpreter
;  (setq pyvenv-post-activate-hooks
;        (list (lambda ()
;                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
;  (setq pyvenv-post-deactivate-hooks
;        (list (lambda ()
;                (setq python-shell-interpreter "python3")))))
#+end_src

** yasnippet

#+begin_src emacs-lisp
;(use-package yasnippet
;  :ensure t
;  :defer 10
;  :hook (prog-mode . yas-minor-mode)
;  :config
;  (yas-reload-all))

;(use-package yasnippet-snippets
;  :ensure t
;  ;defer t
;  :after yasnippet)
#+end_src

** eglot - include package
eglot - Emacs Polyglot is the Emacs LSP client that stays out of your way:
https://github.com/joaotavora/eglot

eglot / corfu issue?
https://github.com/minad/corfu/issues/136

eglot blog
https://whatacold.io/blog/2022-01-22-emacs-eglot-lsp/
https://www.reddit.com/r/emacs/comments/ushfzn/python_ide_using_eglot/
https://taingram.org/blog/emacs-lsp-ide.html

#+begin_src emacs-lisp
;(use-package eglot
;  :ensure t
;  :defer t
;  :init (setq completion-category-overrides '((eglot (styles orderless))))
;  :commands eglot
;  ;:config
;  ;(add-to-list 'eglot-server-programs '(python-mode . ("pylsp")))
;  ;(add-hook 'python-mode-hook 'eglot-ensure)
;  ;(add-hook 'python-mode-hook '(lambda() (add-hook 'before-save-hook 'eglot-format-buffer nil t)))
;  ;(setq python-shell-interpreter "python3")
;)
;
;;; https://emacs.stackexchange.com/questions/74713/python-language-server-with-eglot-cant-get-it-working?rq=1
;(use-package python
;  :interpreter ("python3" . python-mode)
;  :config
;  (add-hook 'python-hook (lambda ()
;             (setq python-indent-guess-indent-offset-verbose nil)))
;  ;(add-hook 'python-mode-hook 'company-mode)
;  (add-hook 'python-mode-hook 'corfu-mode)
;  (add-hook 'python-mode-hook #'yas-minor-mode)
;  (add-hook 'python-mode-hook 'eglot-ensure)
;  (add-hook 'python-mode-hook (lambda () (setq eglot-connect-timeout 120)))
;  (add-hook 'python-mode-hook (lambda () (setq eglot-autoshutdown t)))
;)
#+end_src

* Testing

#+begin_src emacs-lisp
;; Deadgrep
;; https://github.com/Wilfred/deadgrep
; https://www.karsdorp.io/posts/dotemacs/
; https://blog.burntsushi.net/ripgrep/
(use-package deadgrep
  :ensure t
  :defer 0.8
  :bind
  (("C-c f r" . deadgrep)
   ("C-c f f" . grep-org-files))
  :config
  (defun grep-org-files (words)
    (interactive "sSearch org files: ")
    (let ((default-directory org-directory)
          (deadgrep--file-type '(glob . "*.org"))

          (deadgrep--context '(1 . 1))
          (deadgrep--search-type 'regexp))
      (deadgrep words))))

;; regex expressions
;; https://github.com/benma/visual-regexp.el
;; https://github.com/benma/visual-regexp-steroids.el/
;(use-package visual-regexp
;  :bind (("C-c 5" . #'vr/replace)))

;; delete other windows in verticle column
(global-set-key (kbd "C-x 7") 'delete-other-windows-vertically)


;; I use a single agenda file for my day to day time tracking and generally note-taking. This is a function I use to narrow to just today:
;; https://www.reddit.com/r/emacs/comments/11ybs72/weekly_tips_tricks_c_thread/
;(defun org-mode/narrow-to-date (date)
;  "Narrow agenda to given DATE agenda subtree."
;  (interactive (list (if current-prefix-arg
;                       (org-read-date nil nil nil "Pick a day:")
;                       (format-time-string "%Y-%m-%d"))))
;  (widen)
;  (end-of-buffer)
;  (re-search-backward (concat "^\*\*\* " date))
;  (end-of-line)
;  (org-narrow-to-subtree)
;  (message "Narrowing to %s agenda" date))


;; esup profiler
;; https://github.com/jschaf/esup
;; Usage
;; To start Esup, run M-x esup, and watch the magic happen.
;;
;; Profile a custom file with esup
;; By default, Esup will profile user-init-file. To profile a custom file, call esup with a prefix argument. That is, C-u M-x esup.
;;;(;use-package esup
;  :ensure t
;  ;; To use MELPA Stable use ":pin melpa-stable",
;  :pin melpa)
#+end_src

Create graphviz of loading modules
This will insert a graphviz file into my scratch buffer, and then I paste that into https://dreampuf.github.io/GraphvizOnline/ to get a visualization. I've already discovered some unexpected dependencies…

#+begin_src emacs-lisp
(defun -my/load-history-one-to-graphviz (module)
  "(internal) Convert one entry of load-history into a graphviz string"
  (cl-loop for entry in (cdr module)
           if (and (consp entry) (eq (car entry) 'provide))
           collect (cdr entry) into provide
           if (and (consp entry) (eq (car entry) 'require))
           collect (cdr entry) into require
           finally
           return
           (and provide
                (cl-loop for dependency in require
                         concat (format "  \"%s\" -> \"%s\";\n" (car provide) dependency)))
           ))

(defun my/load-history-to-graphviz ()
  "Convert load-history provides/requires into a graphviz graph"
  (interactive)
  (with-current-buffer "*scratch*"
    (insert "digraph G {\n  rankdir=\"LR\";\n")
    (insert (cl-loop for module in load-history
            for graphviz = (-my/load-history-one-to-graphviz module)
            concat (or graphviz "")))
    (insert "}\n")))
#+end_src

My frequently used function to sum all day expenses in diary:
https://www.reddit.com/r/emacs/comments/szc7za/weekly_tips_tricks_c_thread/
#+begin_src emacs-lisp
(defun sum-numbers-in-region (start end)
 "Sum all numbers in region and place result into kill ring."
  (interactive "r")
  (let* ((sum (cl-reduce #'+
                      (split-string (buffer-substring start
                                                      end))
                      :key #'string-to-number)))
    (message "Sum for all numbers in region is %s. Result stored in clipboard." sum)
    (kill-new (format "%s" sum))))
#+end_src

Auto Package Update
https://github.com/rranelli/auto-package-update.el
#+begin_src emacs-lisp
(use-package auto-package-update
  :ensure t
  :defer t
  :config
  ;; Yes, please delete the old version on updates.
  (setq auto-package-update-delete-old-versions t))
#+end_src

* Toggle testing

https://gist.github.com/msoeken/4b2e3ee07b7252f8cb99
(defun toggle-term ()
  "Toggles between terminal and current buffer (creates terminal, if none exists)"
  (interactive)
  (if (string= (buffer-name) "*ansi-term*")
      (switch-to-buffer (other-buffer (current-buffer)))
    (if (get-buffer "*ansi-term*")
        (switch-to-buffer "*ansi-term*")
      (progn
        (ansi-term (getenv "SHELL"))
        (setq show-trailing-whitespace nil)))))
(global-set-key (kbd "S-<f8>") 'toggle-term)


Window placement (replace eshell-toggle?)
https://github.com/cesarolea/emacs
(add-to-list 'display-buffer-alist
             '("\\*vterm\\*.*"
               (display-buffer-in-side-window)
               (inhibit-same-window . t)
               (side . bottom)
               (window-height . 0.25)
               (slot . -1)
               (window-parameters . ((no-delete-other-windows . t)))))

(setq vterm-buffer-name-string "blarg %s")


(defun my/term ()
  "Start shell in a terminal emulator."
  (interactive)
  (let ((switch-to-buffer-obey-display-actions t))
    (vterm) ))

(define-key global-map (kbd "<f8>") 'my/term)
(define-key global-map (kbd "<S-f8>") 'window-toggle-side-windows)


;;; add dwim?
;;;###autoload
(defun multi-vterm-dedicated-toggle ()
  "Toggle dedicated `multi-vterm' window."
  (interactive)
  (if (multi-vterm-dedicated-exist-p)
      (multi-vterm-dedicated-close)
    (multi-vterm-dedicated-open)))

toggle vscode layout on/off
(defvar code-layout 0 "Initial setting for the `dbj-layout` global variable.")
(defun dj-code-toggle ()
  "Toggle setup forcoding environment"
  (interactive)
    (cond
      ((= code-layout 0)
        (message "- Setting up layout")
          (eshell-toggle)
          (treemacs)
        (setq code-layout 1))
      ((= code-layout 1)
        (message "- Cleaning up layout")
          (eshell-toggle)
          (treemacs-quit)
        (setq code-layout 0)) ) )


https://www.reddit.com/r/emacs/comments/kobq4x/open_treemacs_programmatically_not_working/
(defun ugt/open-project-smig3 ()
  "Open workspace for project."
  (interactive)
  (treemacs-select-window) ;; opens `treemacs' window
  (with-current-buffer (find-file "~/Dropbox/org/projects/smig3.org")
    (delete-other-windows)
    (split-window-right)
    (beginning-of-buffer)
    (ugt/org-show-n-levels 2)))

#+begin_src emacs-lisp
(defun dj/workspace ()
  "Open workspace for project, like vscode."
  (interactive)
    (switch-to-buffer "*scratch*")
    (beginning-of-buffer)
    (delete-other-windows)
    (eshell-toggle)
    (treemacs-select-window) ;; opens `treemacs' window
)
#+end_src
