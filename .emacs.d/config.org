# -*- mode: org; fill-column: 78 -*-
#+STARTUP: overview

Check this: https://sachachua.com/dotemacs/index.html

* Startup
** initialization
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
;; init.el

; whoami?
(setq
 user-full-name "Douglas Jackson"
 user-mail-address "hpotter@hogworts.edu")

;; more useful frame title that shows either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

;;;; Load Customizations if they exist
;; https://lupan.pl/dotemacs/
(setq custom-file "~/Sync/elisp/custom.el")
(if (file-exists-p custom-file)
    (load custom-file))

;;;; Add 'info' and 'elisp' to load-path (C-h v load-path RET)
(add-to-list 'Info-additional-directory-list
   "~/Sync/my_homedir_files/emacs.d/info")
(add-to-list 'load-path "~/.emacs.d/elisp/") ;; elisp packages not in pkg mgr

;;;; Only start server if it is not currently running
(load "server")
(setq server-socket-dir "~/.emacs.d/var/tmp")
(unless (server-running-p) (server-start))
#+end_src

** enable disabled functions
#+begin_src emacs-lisp
;; Upcase and downcase regions
(put 'upcase-region 'disabled nil)  ; C-x C-u
(put 'downcase-region 'disabled nil)  ; C-x C-l

;; Sets the current horizontal position for C-n and C-p
(put 'set-goal-column 'disabled nil)

;; Restrict buffer editing to a region
;; Text Narrowing commands:
;;   Region: C-x n n, Page: C-x n p
;;   Funct: C-x n p, Widen: C-x n w
;;   Subtree in Org-Mode:   C-x n s
(put 'narrow-to-region 'disabled nil)

;; Goal Column, enter C-x C-n, at point to set column that C-n should go to
;; to clear enter C-u C-x C-n
(put 'set-goal-column 'disabled nil)

;; https://www.emacswiki.org/emacs/ZapUpToChar
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)

;; disable electric-indent if active, added in Emacs 24.4
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+end_src
** global key bindings
#+begin_src emacs-lisp
;;; test out electric buffer mode - disabled, nice, but navigation highlighted every line
;;; also, buffer management (deleting, etc) wasn't as polisihed as iBuffer
(global-set-key (kbd "C-x C-b") 'electric-buffer-list)

;;; https://stackoverflow.com/questions/93058/emacs-switching-to-another-frame-mac-os-x
; Re-enable swap frames with M-`
;(global-set-key "\M-`" 'other-frame)

;; Open an Emacs eshell, shell, term, or ansi-term - conflicting with toggle
;(global-set-key (kbd "C-c te") 'eshell)
;(global-set-key (kbd "C-c ts") 'shell)
;(global-set-key (kbd "C-c tt") 'term)
;(global-set-key (kbd "C-c ta") 'ansi-term)
;(global-set-key (kbd "C-c tv") 'vterm) ; moved to vterm

;; Show a summery of all registers with content
(global-set-key (kbd "C-x r v") 'list-registers)

;; Move through windows in reverse order of (other-window), C-x o
(global-set-key (kbd "C-x O") 'previous-multiframe-window)

;; Invoke M-x without the Alt key (from Steve Yegge's blog)
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
(global-set-key (kbd "C-c C-m") 'execute-extended-command)
#+end_src
** global settings
#+begin_src emacs-lisp
;; add org-roam-directory to safe variables
;(add-to-list 'safe-local-variable-values '(org-roam-directory . "."))

;; set default shell to zsh
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)

;; Remove trailing whitespace on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; automatically follow symlinks to files under version control without prompting
(setq vc-follow-symlinks t)

;;; Kill line backwards
;;; http://emacsredux.com/blog/2013/04/08/kill-line-backward/
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))

;;; Ping settings (from net-util.el)
;;; http://www.masteringemacs.org/articles/2011/03/02/network-utilities-emacs/
(defvar ping-program-options)
(setq ping-program-options '("-c" "4"))

;;; Enable whitespace-mode for diff buffers
;;; http://stackoverflow.com/questions/11805584/automatically-enable-whitespace-mode-in-diff-mode
(add-hook 'diff-mode-hook
          '(lambda ()
            (whitespace-mode 1)))

;;; Enable holidays in Calendar
(setq mark-holidays-in-calendar t)

;; w/o-man mode (elisp man page formater for systems without 'man')
(defvar woman-show-log)
(defvar woman-cache-filename)
(setq woman-show-log nil)
(autoload 'woman "woman"
  "Decode and browse a Unix man page." t)
(setq woman-cache-filename "~/.emacs.d/var/woman_cache.el")

;;; Make tooltips appear in the echo area (checks if function exists)
(tooltip-mode nil)

;; Use CUA mode for rectangles (C-RET to select, normal emacs keys to copy)
;;; http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html
(setq cua-enable-cua-keys nil)  ;; only for rectangles, keeps (C-c, C-v, C-x).
(cua-mode t)

;;; Set scratch buffer initial mode to text instead of lisp eval
;(setq-default initial-major-mode 'text-mode)
;;; Don't create new lines when pressing 'arrow-down key' at end of the buffer
(setq next-line-add-newlines nil)

;;; Fix delete key working as backspace and not forward deleting
;;; (This only worked in window mode, not terminal. C-d works in both)
(when window-system (normal-erase-is-backspace-mode 1))

;;; Alias to change apropos to ap
(defalias 'ap 'apropos)

;;; hl-line: highlight the current line
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t)) ;; turn it on for all modes by default

;;; Make text mode default major mode with auto-fill enabled
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode) ;replaces longlines in 23

;;; Auto-scroll in *Compilation* buffer
(setq compilation-scroll-output t)

;;; make Emacs always indent using SPC characters and never TABs
;;; i.e. use spaces instead of tabs
;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Just-Spaces.html
(setq-default indent-tabs-mode nil)

;;; "y or n" instead of "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;;; Highlight regions and add special behaviors to regions.
;;; "C-h d transient" for more info.  transient-mark-mode is a toggle.
;;; also in Emacs 22 and greater, C-SPC twice to temp enable transient mark
;(setq transient-mark-mode nil)
(setq transient-mark-mode t)

;;; Display line and column numbers in the mode line
(setq line-number-mode    t
      column-number-mode  t)

;;; Stop blinking cursor
(blink-cursor-mode 0)

;;; Explicitly show the end of a buffer (indicated on left fringe of window)
(set-default 'indicate-empty-lines t)

;;; Line-wrapping
(set-default 'fill-column 78)

;; Don't truncate lines
(setq truncate-lines t
      truncate-partial-width-windows nil)

;; Create new scratch buffer if needed
(run-with-idle-timer 1 t
    '(lambda () (get-buffer-create "*scratch*")))

;; allow scroll-down/up-command to move point to buffer end/beginning
;(setq scroll-error-top-bottom 'true)

;; New json-mode
(setq auto-mode-alist (cons '("\\.json\\'" . js-mode) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bookmarks
;;    ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
;;    ‘C-x r b’ – jump to a bookmark
;;    ‘C-x r l’ – list your bookmarks
;;    ‘M-x bookmark-delete’ – delete a bookmark by name
(setq
  bookmark-default-file "~/.emacs.d/var/bookmarks" ;; bookmark file location
  bookmark-save-flag 1)                   ;; autosave each change)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

** functions
#+begin_src emacs-lisp
;;; ---------------------------------------------------------------------------
;;; https://stackoverflow.com/questions/8881649/how-to-force-org-mode-to-open-a-link-in-another-frame
;;; Open link at point in new frame
(defun zin/org-open-other-frame ()
  "Jump to bookmark in another frame. See `bookmark-jump' for more."
  (interactive)
  (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
    (org-open-at-point)))
(global-set-key (kbd "C-c 5 C-o") 'zin/org-open-other-frame)

;;; ---------------------------------------------------------------------------
;;; https://gist.github.com/mwfogleman/95cc60c87a9323876c6c
;;; http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
(defun narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((equal major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))
(global-set-key (kbd "C-c n n") 'narrow-or-widen-dwim)  ; was: C-c n then C-c x

;; I bind this key to C-c n, using the bind-key function that comes with use-package.
;(bind-key "C-c n" 'narrow-or-widen-dwim)
;; I also bind it to C-x t n, using Artur Malabarba's toggle map idea:
;; http:://www.endlessparentheses.com/the-toggle-map-and-wizardry.html

;;; ---------------------------------------------------------------------------
;;; Move lines up or down (can't easily use C-S on MacOS)
;;; http://whattheemacsd.com//editing-defuns.el-02.html
(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines -1))
    (move-to-column col)))

;(global-set-key (kbd "<C-S-down>") 'move-line-down)
;(global-set-key (kbd "<C-S-up>") 'move-line-up)
(global-set-key (kbd "<M-S-down>") 'move-line-down)
(global-set-key (kbd "<M-S-up>") 'move-line-up)

;;; ---------------------------------------------------------------------------
;;; Match Paren / based on the vim command using %
;;; emacs for vi users: http://grok2.tripod.com
(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

;;; ---------------------------------------------------------------------------
(defun intelligent-close ()
  "quit a frame the same way no matter what kind of frame you are on.

This method, when bound to C-x C-c, allows you to close an emacs frame the
same way, whether it's the sole window you have open, or whether it's
a \"child\" frame of a \"parent\" frame.  If you're like me, and use emacs in
a windowing environment, you probably have lots of frames open at any given
time.  Well, it's a pain to remember to do Ctrl-x 5 0 to dispose of a child
frame, and to remember to do C-x C-x to close the main frame (and if you're
not careful, doing so will take all the child frames away with it).  This
is my solution to that: an intelligent close-frame operation that works in
all cases (even in an emacs -nw session).

Stolen from http://www.dotemacs.de/dotfiles/BenjaminRutt.emacs.html."
  (interactive)
  (if (eq (car (visible-frame-list)) (selected-frame))
      ;;for parent/master frame...
      (if (> (length (visible-frame-list)) 1)
          ;;close a parent with children present
          (delete-frame (selected-frame))
        ;;close a parent with no children present
        (save-buffers-kill-emacs))
    ;;close a child frame
    (delete-frame (selected-frame))))
(global-set-key "\C-x\C-c" 'intelligent-close) ;forward reference
#+end_src
* Keybindings
** code - empty
** file

TODO: convert doom'isms

#+begin_src emacs-lisp
  (progn
    (define-prefix-command 'file-keymap)
    (define-key file-keymap (kbd "c") '("Open project editorconfig"   . editorconfig-find-current-editorconfig))
    (define-key file-keymap (kbd "C") '("Copy this file"              . doom/copy-this-file))
    (define-key file-keymap (kbd "d") '("Find directory"              . dired))
    (define-key file-keymap (kbd "D") '("Delete this file"            . doom/delete-this-file))
    (define-key file-keymap (kbd "e") '("Find file in emacs.d"        . doom/find-file-in-emacsd))
    (define-key file-keymap (kbd "E") '("Browse emacs.d"              . doom/browse-in-emacsd))
    (define-key file-keymap (kbd "f") '("Find file"                   . find-file))
    (define-key file-keymap (kbd "F") '("Find file from here"         . +default/find-file-under-here))
    (define-key file-keymap (kbd "l") '("Locate file"                 . locate))
    (define-key file-keymap (kbd "m") '("Rename/move this file"       . doom/move-this-file))
    (define-key file-keymap (kbd "p") '("Find file in private config" . doom/find-file-in-private-config))
    (define-key file-keymap (kbd "P") '("Browse private config"       . doom/open-private-config))
    (define-key file-keymap (kbd "r") '("Recent files"                . recentf-open-files))
    (define-key file-keymap (kbd "R") '("Recent project files"        . projectile-recentf))
    (define-key file-keymap (kbd "u") '("Sudo this file"              . doom/sudo-this-file))
    (define-key file-keymap (kbd "U") '("Sudo find file"              . doom/sudo-find-file))
    (define-key file-keymap (kbd "y") '("Yank file path"              . +default/yank-buffer-path))
    (define-key file-keymap (kbd "Y") '("Yank file path from project" . +default/yank-buffer-path-relative-to-project))
    (define-key file-keymap (kbd "x") '("Open scratch buffer"         . doom/open-scratch-buffer))
    (define-key file-keymap (kbd "X") '("Switch to scratch buffer"    . doom/switch-to-scratch-buffer))
  )

  (global-set-key (kbd "C-c f") '("file" . file-keymap))
#+end_src

** insert - empty
** multiple-cursors
module multiple-cursors

#+begin_src emacs-lisp
  (progn
    (define-prefix-command 'multiple-cursors-keymap)
    (define-key multiple-cursors-keymap (kbd "l") '("Edit lines"        . mc/edit-lines))
    (define-key multiple-cursors-keymap (kbd "n") '("Mark next"         . mc/mark-next-like-this))
    (define-key multiple-cursors-keymap (kbd "N") '("Unmark next"       . mc/unmark-next-like-this))
    (define-key multiple-cursors-keymap (kbd "p") '("Mark previous"     . mc/mark-previous-like-this))
    (define-key multiple-cursors-keymap (kbd "P") '("Unmark previous"   . mc/unmark-previous-like-this))
    (define-key multiple-cursors-keymap (kbd "t") '("Mark all"          . mc/mark-all-like-this))
    (define-key multiple-cursors-keymap (kbd "m") '("Mark all DWIM"     . mc/mark-all-like-this-dwim))
    (define-key multiple-cursors-keymap (kbd "e") '("Edit line endings" . mc/edit-ends-of-lines))
    (define-key multiple-cursors-keymap (kbd "a") '("Edit line starts"  . mc/edit-beginnings-of-lines))
    (define-key multiple-cursors-keymap (kbd "s") '("Mark tag"          . mc/mark-sgml-tag-pair))
    (define-key multiple-cursors-keymap (kbd "d") '("Mark in defun"     . mc/mark-all-like-this-in-defun))
  )

  ;; consult is already using C-c m?
  (global-set-key (kbd "C-c x") '("multiple-cursors" . multiple-cursors-keymap))
#+end_src

** notes - empty

TODO

    (when (fboundp 'treemacs)

#+begin_src emacs-lisp
  (progn
    (define-prefix-command 'notes-keymap)
    (define-key notes-keymap (kbd ".") '("Search notes for symbol"        . +default/search-notes-for-symbol-at-point))
    (define-key notes-keymap (kbd "a") '("Org agenda"                     . org-agenda))
    (define-key notes-keymap (kbd "b") '("Bibliographic notes"            . citar-open-notes))
    (define-key notes-keymap (kbd "c") '("Toggle last org-clock"          . +org/toggle-last-clock))
    (define-key notes-keymap (kbd "C") '("Cancel current org-clock"       . org-clock-cancel))
    (define-key notes-keymap (kbd "f") '("Find file in notes"             . +default/find-in-notes))
    (define-key notes-keymap (kbd "F") '("Browse notes"                   . +default/browse-notes))
    (define-key notes-keymap (kbd "l") '("Org store link"                 . org-store-link))
    (define-key notes-keymap (kbd "m") '("Tags search"                    . org-tags-view))
    (define-key notes-keymap (kbd "n") '("Org capture"                    . org-capture))
    (define-key notes-keymap (kbd "N") '("Goto capture"                   . org-capture-goto-target))
    (define-key notes-keymap (kbd "o") '("Active org-clock"               . org-clock-goto))
    (define-key notes-keymap (kbd "t") '("Todo list"                      . org-todo-list))
    (define-key notes-keymap (kbd "s") '("Search notes"                   . +default/org-notes-search))
    (define-key notes-keymap (kbd "S") '("Search org agenda headlines"    . +default/org-notes-headlines))
    (define-key notes-keymap (kbd "v") '("View search"                    . org-search-view))
    (define-key notes-keymap (kbd "y") '("Org export to clipboard"        . +org/export-to-clipboard))
    (define-key notes-keymap (kbd "Y") '("Org export to clipboard as RTF" . +org/export-to-clipboard-as-rich-text))
    (define-key notes-keymap (kbd "j") '("New Entry"                      . org-journal-new-entry))
    (define-key notes-keymap (kbd "J") '("New Scheduled Entry"            . org-journal-new-scheduled-entry))
    (define-key notes-keymap (kbd "s") '("Search Forever"                 . org-journal-search-forever))

    (define-prefix-command 'roam2-notes-keymap)
    (define-key notes-keymap (kbd "a") '("Open random node"   . org-roam-node-random))
    (define-key notes-keymap (kbd "f") '("Find node"          . org-roam-node-find))
    (define-key notes-keymap (kbd "F") '("Find ref"           . org-roam-ref-find))
    (define-key notes-keymap (kbd "g") '("Show graph"         . org-roam-graph))
    (define-key notes-keymap (kbd "i") '("Insert node"        . org-roam-node-insert))
    (define-key notes-keymap (kbd "n") '("Capture to node"    . org-roam-capture))
    (define-key notes-keymap (kbd "r") '("Toggle roam buffer" . org-roam-buffer-toggle))
    (define-key notes-keymap (kbd "R") '("Launch roam buffer" . org-roam-buffer-display-dedicated))
    (define-key notes-keymap (kbd "s") '("Sync database"      . org-roam-db-sync))

    (define-prefix-command 'date-roam2-notes-keymap)
    (define-key notes-keymap (kbd "b") '("Goto previous note" . org-roam-dailies-goto-previous-note))
    (define-key notes-keymap (kbd "d") '("Goto date"          . org-roam-dailies-goto-date))
    (define-key notes-keymap (kbd "D") '("Capture date"       . org-roam-dailies-capture-date))
    (define-key notes-keymap (kbd "f") '("Goto next note"     . org-roam-dailies-goto-next-note))
    (define-key notes-keymap (kbd "m") '("Goto tomorrow"      . org-roam-dailies-goto-tomorrow))
    (define-key notes-keymap (kbd "M") '("Capture tomorrow"   . org-roam-dailies-capture-tomorrow))
    (define-key notes-keymap (kbd "n") '("Capture today"      . org-roam-dailies-capture-today))
    (define-key notes-keymap (kbd "t") '("Goto today"         . org-roam-dailies-goto-today))
    (define-key notes-keymap (kbd "T") '("Capture today"      . org-roam-dailies-capture-today))
    (define-key notes-keymap (kbd "y") '("Goto yesterday"     . org-roam-dailies-goto-yesterday))
    (define-key notes-keymap (kbd "Y") '("Capture yesterday"  . org-roam-dailies-capture-yesterday))
    (define-key notes-keymap (kbd "-") '("Find directory"     . org-roam-dailies-find-directory))
  )

  (global-set-key (kbd "C-c x") '("notes" . notes-keymap))
  (global-set-key (kbd "C-c x r") '("notes" . roam2-notes-keymap))
  (global-set-key (kbd "C-c x r d") '("date" . date-roam2-notes-keymap))
#+end_src

** open

TODO Needs macos special functions

#+begin_src emacs-lisp
  (progn
    (define-prefix-command 'open-keymap)
    (define-key open-keymap (kbd "b") '("Browser"            . browse-url-of-file))
    (define-key open-keymap (kbd "d") '("Debugger"           . +debugger/start))
    (define-key open-keymap (kbd "f") '("New frame"          . make-frame))
    (define-key open-keymap (kbd "r") '("REPL"               . +eval/open-repl-other-window))
    (define-key open-keymap (kbd "R") '("REPL (same window)" . +eval/open-repl-same-window))
    (define-key open-keymap (kbd "-") '("Dired"              . dired-jump))
    (when (fboundp 'treemacs)
      (define-key open-keymap (kbd "p") '("Project sidebar"               . +treemacs/toggle))
      (define-key open-keymap (kbd "P") '("Find file in project rsidebar" . treemacs-find-file)))
    (when (fboundp 'vterm)
      (define-key open-keymap (kbd "t") '("Toggle vterm popup" . +vterm/toggle))
      (define-key open-keymap (kbd "T") '("Open vterm here"    . +vterm/here)))
    (define-key open-keymap (kbd "o") '("Reveal in Finder"          . +macos/reveal-in-finder))
    (define-key open-keymap (kbd "O") '("Reveal project in Finder"  . +macos/reveal-project-in-finder))
    (define-key open-keymap (kbd "u") '("Send to Transmit"          . +macos/send-to-transmit))
    (define-key open-keymap (kbd "U") '("Send project to Transmit"  . +macos/send-project-to-transmit))
    (define-key open-keymap (kbd "l") '("Send to Launchbar"         . +macos/send-to-launchbar))
    (define-key open-keymap (kbd "L") '("Send project to Launchbar" . +macos/send-project-to-launchbar))
    (define-key open-keymap (kbd "i") '("Open in iTerm"             . +macos/open-in-iterm))
    (define-key open-keymap (kbd "I") '("Open in new iTerm window"  . +macos/open-in-iterm-new-window))
    (when (fboundp 'docker)
      (define-key open-keymap (kbd "D") '("Docker" . docker)))
  )

  (global-set-key (kbd "C-c o") '("open" . open-keymap))
#+end_src

** project - empty
** search

TODO some entries are not working
#+begin_src emacs-lisp
  (progn
    (define-prefix-command 'search-keymap)
    (define-key search-keymap (kbd ".") '("Search project for symbol"  . +default/search-project-for-symbol-at-point))
    (define-key search-keymap (kbd "b") '("Search buffer"              . consult-line))
    ;(define-key search-keymap (kbd "B") '("Search all open buffers"    . consult-line-multi 'all-buffer))
    (define-key search-keymap (kbd "d") '("Search current directory"   . +default/search-cwd))
    (define-key search-keymap (kbd "D") '("Search other directory"     . +default/search-other-cwd))
    (define-key search-keymap (kbd "e") '("Search .emacs.d"            . +default/search-emacsd))
    (define-key search-keymap (kbd "f") '("Locate file"                . +lookup/file))
    (define-key search-keymap (kbd "i") '("Jump to symbol"             . imenu))
    (define-key search-keymap (kbd "l") '("Jump to visible link"       . link-hint-open-link))
    (define-key search-keymap (kbd "L") '("Jump to link"               . ffap-menu))
    (define-key search-keymap (kbd "m") '("Jump to bookmark"           . bookmark-jump))
    (define-key search-keymap (kbd "o") '("Look up online"             . +lookup/online))
    (define-key search-keymap (kbd "O") '("Look up online (w/ prompt)" . +lookup/online-select))
    (define-key search-keymap (kbd "k") '("Look up in local docsets"   . +lookup/in-docsets))
    (define-key search-keymap (kbd "K") '("Look up in all docsets"     . +lookup/in-all-docsets))
    (define-key search-keymap (kbd "p") '("Search project"             . +default/search-project))
    (define-key search-keymap (kbd "P") '("Search other project"       . +default/search-other-project))
    (define-key search-keymap (kbd "s") '("Search buffer"              . +default/search-buffer))
    (define-key search-keymap (kbd "S") '("Search buffer for thing at point" . +vertico/search-symbol-at-point))
    (define-key search-keymap (kbd "t") '("Dictionary"                 . +lookup/dictionary-definition))
    (define-key search-keymap (kbd "T") '("Thesaurus"                  . +lookup/synonyms))
  )

  (global-set-key (kbd "C-c s") '("search" . search-keymap))
#+end_src

** toggle

TODO some entries are not working
#+begin_src emacs-lisp
  (progn
    (define-prefix-command 'toggle-keymap)
    (define-key toggle-keymap (kbd "b") '("Big mode"              . doom-big-font-mode))
    (define-key toggle-keymap (kbd "c") '("Fill Column Indicator" . global-display-fill-column-indicator-mode))
    (define-key toggle-keymap (kbd "f") '("Flymake"               . flymake-mode))
    (define-key toggle-keymap (kbd "F") '("Frame fullscreen"      . toggle-frame-fullscreen))
    (define-key toggle-keymap (kbd "I") '("Indent style"          . doom/toggle-indent-style))
    (define-key toggle-keymap (kbd "l") '("Line numbers"          . doom/toggle-line-numbers))
    (define-key toggle-keymap (kbd "v") '("Visible mode"          . visible-mode))
    (define-key toggle-keymap (kbd "w") '("Soft line wrapping"    . visual-line-mode))
    (when (fboundp 'word-wrap)
      (define-key toggle-keymap (kbd "w") '("Soft line wrapping"    . +word-wrap-mode)))
    (when (fboundp 'checkers)
      (define-key toggle-keymap (kbd "f") '("Flycheck"              . flycheck-mode)))
    (define-key toggle-keymap (kbd "i") '("Indent guides"         . highlight-indent-guides-mode))
    (define-key toggle-keymap (kbd "m") '("Minimap mode"          . minimap-mode))
    (define-key toggle-keymap (kbd "p") '("org-tree-slide mode"   . org-tree-slide-mode))
    (define-key toggle-keymap (kbd "r") '("Read-only mode"        . read-only-mode))
    (define-key toggle-keymap (kbd "s") '("Spell checker"         . flyspell-mode))
  )

  (global-set-key (kbd "C-c t") '("search" . toggle-keymap))
#+end_src

** versioning
module magit, vc-gutter
(installed diff-hl instead, covert to that or pull vc-gutter from doom)

#+begin_src emacs-lisp
  ;(setq versioning-keymap (make-sparse-keymap)) ; create empty keymap, needed?

; check for magit for keybind: (when (fboundp 'magit)

  (progn
    (define-prefix-command 'versioning-keymap)
    (define-key versioning-keymap (kbd "R") '("Git revert file"       . vc-revert))
    (define-key versioning-keymap (kbd "y") '("Kill link to remote"   . +vc/browse-at-remote-kill))
    (define-key versioning-keymap (kbd "Y") '("Kill link to homepage" . +vc/browse-at-remote-kill-homepage))
    (define-key versioning-keymap (kbd "r") '("Git revert hunk"       . +vc-gutter/revert-hunk))
    (define-key versioning-keymap (kbd "s") '("Git stage hunk"        . +vc-gutter/stage-hunk))
    (define-key versioning-keymap (kbd "r") '("Git time machine"      . git-timemachine-toggle))
    (define-key versioning-keymap (kbd "n") '("Jump to next hunk"     . +vc-gutter/next-hunk))
    (define-key versioning-keymap (kbd "p") '("Jump to previous hunk" . +vc-gutter/previous-hunk))
    (define-key versioning-keymap (kbd "/") '("Magit dispatch"        . magit-dispatch))
    (define-key versioning-keymap (kbd ".") '("Magit file dispatch"   . magit-file-dispatch))
    (define-key versioning-keymap (kbd "'") '("Forge dispatch"        . forge-dispatch))
    (define-key versioning-keymap (kbd "g") '("Magit status"          . magit-status))
    (define-key versioning-keymap (kbd "G") '("Magit status here"     . magit-status-here))
    (define-key versioning-keymap (kbd "x") '("Magit file delete"     . magit-file-delete))
    (define-key versioning-keymap (kbd "B") '("Magit blame"           . magit-blame-addition))
    (define-key versioning-keymap (kbd "C") '("Magit clone"           . magit-clone))
    (define-key versioning-keymap (kbd "F") '("Magit fetch"           . magit-fetch))
    (define-key versioning-keymap (kbd "L") '("Magit buffer log"      . magit-log-buffer-file))
    (define-key versioning-keymap (kbd "S") '("Git stage file"        . magit-stage-file))
    (define-key versioning-keymap (kbd "U") '("Git unstage file"      . magit-unstage-file))

    ;; sub-menues (c+create, f+find, l+list, o+open in browser
    (define-prefix-command 'vc-find-keymap)
    (define-key vc-find-keymap (kbd "f") '("Find file"           . magit-find-file))
    (define-key vc-find-keymap (kbd "g") '("Find gitconfig file" . magit-find-git-config-file))
    (define-key vc-find-keymap (kbd "c") '("Find commit"         . magit-show-commit))
    (define-key vc-find-keymap (kbd "i") '("Find issue"          . forge-visit-issue))
    (define-key vc-find-keymap (kbd "p") '("Find pull request"   . forge-visit-pullreq))

    (define-prefix-command 'vc-open-keymap)
    (define-key vc-open-keymap (kbd ".") '("Browse file or region" . +vc/browse-at-remote))
    (define-key vc-open-keymap (kbd "h") '("Browse homepage"       . +vc/browse-at-remote-homepage))
    (define-key vc-open-keymap (kbd "r") '("Browse remote"         . forge-browse-remote))
    (define-key vc-open-keymap (kbd "c") '("Browse commit"         . forge-browse-commit))
    (define-key vc-open-keymap (kbd "i") '("Browse an issue"       . forge-browse-issue))
    (define-key vc-open-keymap (kbd "p") '("Browse a pull request" . forge-browse-pullreq))
    (define-key vc-open-keymap (kbd "I") '("Browse issues"         . forge-browse-issues))
    (define-key vc-open-keymap (kbd "P") '("Browse pull requests"  . forge-browse-pullreqs))

    (define-prefix-command 'vc-list-keymap)
    (define-key vc-list-keymap (kbd "g") '("List gists"          . gist-list))
    (define-key vc-list-keymap (kbd "r") '("List repositories"   . magit-list-repositories))
    (define-key vc-list-keymap (kbd "s") '("List submodules"     . magit-list-submodules))
    (define-key vc-list-keymap (kbd "i") '("List issues"         . forge-list-issues))
    (define-key vc-list-keymap (kbd "p") '("List pull requests"  . forge-list-pullreqs))
    (define-key vc-list-keymap (kbd "n") '("List notifications"  . forge-list-notifications))

    (define-prefix-command 'vc-create-keymap)
    (define-key vc-create-keymap (kbd "r") '("Initialize repo" . magit-init))
    (define-key vc-create-keymap (kbd "R") '("Clone repo"      . magit-clone))
    (define-key vc-create-keymap (kbd "c") '("Commit"          . magit-commit-create))
    (define-key vc-create-keymap (kbd "f") '("Fixup"           . magit-commit-fixup))
    (define-key vc-create-keymap (kbd "i") '("Issue"           . forge-create-issue))
    (define-key vc-create-keymap (kbd "p") '("Pull request"    . forge-create-pullreq))
  )

  (global-set-key (kbd "C-c v")   '("versioning" . versioning-keymap))
  (global-set-key (kbd "C-c v c") '("create"     . vc-create-keymap))
  (global-set-key (kbd "C-c v f") '("find"       . vc-find-keymap))
  (global-set-key (kbd "C-c v l") '("list"       . vc-list-keymap))
  (global-set-key (kbd "C-c v o") '("open in browser" . vc-open-keymap))
#+end_src

** workspaces/windows - doesn't work, need workspaces from doom

module workspaces ==  persp-mode

...#+begin_src emacs-lisp
  ;(setq workspaces-keymap (make-sparse-keymap)) ; create empty keymap, needed?

  (progn
    (define-prefix-command 'workspaces-keymap)
    (define-key workspaces-keymap (kbd "d") '("Display workspaces"          . +workspace/display))
    (define-key workspaces-keymap (kbd "r") '("Rename workspace"            . +workspace/rename))
    (define-key workspaces-keymap (kbd "c") '("Create workspace"            . +workspace/new))
    (define-key workspaces-keymap (kbd "C") '("Create named workspace"      . +workspace/new-named))
    (define-key workspaces-keymap (kbd "k") '("Delete workspace"            . +workspace/delete))
    (define-key workspaces-keymap (kbd "S") '("Save workspace"              . +workspace/save))
    (define-key workspaces-keymap (kbd "o") '("Switch to other workspace"   . +workspace/other))
    (define-key workspaces-keymap (kbd "p") '("Switch to left workspace"    . +workspace/switch-left))
    (define-key workspaces-keymap (kbd "n") '("Switch to right workspace"   . +workspace/switch-right))
    (define-key workspaces-keymap (kbd "w") '("Switch to"                   . +workspace/switch-to))
    (define-key workspaces-keymap (kbd "1") '("Switch to workspace 1"       . +workspace/switch-to-0))
    (define-key workspaces-keymap (kbd "2") '("Switch to workspace 2"       . +workspace/switch-to-1))
    (define-key workspaces-keymap (kbd "3") '("Switch to workspace 3"       . +workspace/switch-to-2))
    (define-key workspaces-keymap (kbd "4") '("Switch to workspace 4"       . +workspace/switch-to-3))
    (define-key workspaces-keymap (kbd "5") '("Switch to workspace 5"       . +workspace/switch-to-4))
    (define-key workspaces-keymap (kbd "6") '("Switch to workspace 6"       . +workspace/switch-to-5))
    (define-key workspaces-keymap (kbd "7") '("Switch to workspace 7"       . +workspace/switch-to-6))
    (define-key workspaces-keymap (kbd "8") '("Switch to workspace 8"       . +workspace/switch-to-7))
    (define-key workspaces-keymap (kbd "9") '("Switch to workspace 9"       . +workspace/switch-to-8))
    (define-key workspaces-keymap (kbd "0") '("Switch to last workspace"    . +workspace/switch-to-final))
    (define-key workspaces-keymap (kbd "a") '("Autosave session"            . doom/quicksave-session))
    (define-key workspaces-keymap (kbd "s") '("Save session"                . doom/save-session))
    (define-key workspaces-keymap (kbd "l") '("Load session"                . doom/load-session))
    (define-key workspaces-keymap (kbd "L") '("Load last autosaved session" . doom/quickload-session))
    (define-key workspaces-keymap (kbd "u") '("Undo window config"          . winner-undo))
    (define-key workspaces-keymap (kbd "U") '("Redo window config"          . winner-redo))
  )

  (global-set-key (kbd "C-c w")   '("workspaces/windows" . workspaces-keymap))
...#+end_src

* Utilities
** helpful
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
https://github.com/Wilfred/helpful

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind
  (("C-h f" . helpful-callable)
   ("C-h v" . helpful-variable)
   ("C-h k" . helpful-key)
  ;;
  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  ;("C-c C-d" . helpful-at-point)  # keys already bound to Cal Deadline

  ;; Look up *F*unctions (excludes macros).
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  ("C-h F" . helpful-function)

  ;; Look up *C*ommands.
  ;;
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  ("C-h C" . helpful-command)
))
#+end_src

** su/sudo
read-only files will be writable but if you attempt to save your modifications, emacs will ask root user’s password if needed. Can save pw to ~/.authinfo.
https://github.com/PythonNut/su.el

NOTE: Installed in elisp, no package

#+begin_src emacs-lisp
;(use-package su
;  :config (su-mode +1))
#+end_src

** recentf
a minor mode that builds a list of recently opened files
https://www.emacswiki.org/emacs/RecentFiles

Relacing open read-only key binding

#+begin_src emacs-lisp
(use-package recentf
  ;:bind ("\C-x\ \C-r" . recentf-open-files)
  :bind ("\C-x\ \C-r" . consult-recent-file)
  :config
  (setq recentf-save-file "~/.emacs.d/var/recentf"
        ;recentf-save-file (expand-file-name "recentf" "~/.emacs.d/var")
        recentf-max-saved-items 500
        recentf-max-menu-items 15
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files
        recentf-auto-cleanup 'never)
  (add-to-list 'recentf-exclude '(".*-autoloads\\.el\\'"
                                  "[/\\]\\.elpa/"))
  (recentf-mode +1))
#+end_src

** flyspell (spelling)
Correcting misspelled words with flyspell using favourite interface.
https://emacs.stackexchange.com/questions/31300/can-you-turn-on-flyspell-for-comments-but-not-strings

Mac: brew install aspell

#+begin_src emacs-lisp
(use-package flyspell
  :init
  ;(progn
  ;  (flyspell-mode 1))
  :hook ((prog-mode . flyspell-prog-mode)
         (org-mode  . turn-off-flyspell)
         (text-mode . flyspell-mode))
  ;:bind ("s-$" . ispell-word)
  :config
  (global-unset-key (kbd "M-$")) ; on mac screenshot region
  (global-set-key (kbd "s-$") 'ispell-word)
  (progn
    (setq ispell-program-name "aspell")
    (setq ispell-list-command "--list")
    (setq ispell-extra-args '("--sug-mode=fast" "--lang=en_US"))
  ) ;; run flyspell with aspell, not ispell
)

;; Correcting misspelled words with flyspell using favourite interface.
;; https://github.com/d12frosted/flyspell-correct
;(use-package flyspell-correct
;  :after flyspell)
#+end_src
* OS Settings
** MacOS
#+begin_src emacs-lisp
(cond ((eq system-type 'darwin)
;	(setq mac-command-modifier 'meta
;	      mac-option-modifier 'alt
;	      mac-right-option-modifier 'super)

;; enable srgb mode if compiled in
;(setq ns-use-srgb-colorspace t)
;; or turn off if causing problems
;(setq ns-use-srgb-colorspace nil)

;; set keys for Apple keyboard, for emacs in OS X
(setq mac-command-modifier 'meta) ; make cmd key do Meta
(setq mac-option-modifier 'super) ; make opt key do Super
(setq mac-control-modifier 'control) ; make Control key do Control
;(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper

;; Use macOS default shortscuts for Cut/Copy/Paste/Select All
;; https://www.emacswiki.org/emacs/EmacsForMacOS#h5o-37
(global-set-key (kbd "M-c") 'kill-ring-save) ; ⌘-c = Copy
(global-set-key (kbd "M-x") 'kill-region) ; ⌘-x = Cut
(global-set-key (kbd "M-v") 'yank) ; ⌘-v = Paste
(global-set-key (kbd "M-a") 'mark-whole-buffer) ; ⌘-a = Select all
(global-set-key (kbd "M-z") 'undo) ; ⌘-z = Undo
(global-set-key (kbd "s-x") 'execute-extended-command) ; Replace ≈ with whatever your option-x produces

;; Use meta +/- to change text size
(bind-key "M-+" 'text-scale-increase)
(bind-key "M-=" 'text-scale-increase)
(bind-key "M--" 'text-scale-decrease)

;; This is copied from
;; https://zzamboni.org/post/my-emacs-configuration-with-commentary/
(defun my/text-scale-reset ()
  "Reset text-scale to 0."
  (interactive)
  (text-scale-set 0))
(bind-key "M-g 0" 'my/text-scale-reset)

;;; set font size to 15, overriding default 12
; M-x describe-font:
; Monaco:pixelsize=12:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
;(set-face-attribute 'default (selected-frame) :height 150)
(set-face-attribute 'default nil :height 150)

;; Osx-trash
;; Make Emacs' delete-by-moving-to-trash do what you expect it to do on OS X.
;; https://github.com/lunaryorn/osx-trash.el
;(use-package osx-trash
;   :ensure t
;   :config
;   (setq delete-by-moving-to-trash t)
;   (osx-trash-setup)
;)

;A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell
;https://github.com/purcell/exec-path-from-shell
;Needed to find aspell and probably others
(use-package exec-path-from-shell
  :ensure t
  :if (memq window-system '(mac ns x))
  :config
  ;(setq exec-path-from-shell-arguments nil) ; was '("-l"), breaks aspell?
  ;(setq exec-path-from-shell-debug 1)  ; enable debugging
  ;(setq exec-path-from-shell--debug 1) ; print msg if debug enabled
  (setq exec-path-from-shell-variables '("PATH" "MANPATH"))
  (exec-path-from-shell-initialize))

;; Disable railwaycat's tab bar
;; https://github.com/railwaycat/homebrew-emacsmacport/issues/123
(defvar mac-frame-tabbing)
(setq mac-frame-tabbing nil)

;; Don't open up new frames for files dropped on icon, use active frame
(defvar ns-pop-up-frames)
(setq ns-pop-up-frames nil)

;; Drag and drop on the emacs window opens the file in a new buffer instead of
;; appending it to the current buffer
;; http://stackoverflow.com/questions/3805658/how-to-configure-emacs-drag-and-drop-to-open-instead-of-append-on-osx
(if (fboundp 'ns-find-file)
    (global-set-key [ns-drag-file] 'ns-find-file))

;; Move deleted files to the System's trash can
;; set trash-directory otherwise uses freedesktop.org-style
(setq trash-directory "~/.Trash")
(setq delete-by-moving-to-trash t)

;; Macbook Pro has no insert key.
;; http://lists.gnu.org/archive/html/help-gnu-emacs/2006-07/msg00220.html
(global-set-key (kbd "C-c I") (function overwrite-mode))

;;; Open up URLs in mac browser
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
; (setq browse-url-browser-function 'browse-url-default-windows-browser)

;;; Copy and paste into Emacs Terminal
;;; stack overflow, pasting text into emacs on Macintosh
;;; Copy - C-x M-w
;;; Paste - C-x C-y
(defun pt-pbpaste ()
  "Paste data from pasteboard."
  (interactive)
  (shell-command-on-region
    (point)
    (if mark-active (mark) (point))
    "pbpaste" nil t))

(defun pt-pbcopy ()
  "Copy region to pasteboard."
  (interactive)
  (print (mark))
  (when mark-active
    (shell-command-on-region
      (point) (mark) "pbcopy")
    (kill-buffer "*Shell Command Output*")))
(global-set-key [C-x C-y] 'pt-pbpaste)
(global-set-key [C-x M-w] 'pt-pbcopy)

;; add the missing man page path for woman
;; https://www.reddit.com/r/emacs/comments/ig7zzo/weekly_tipstricketc_thread/
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/share/man")
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/usr/share/man")
;(add-to-list 'woman-manpath
;             "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/man")

;; On a Mac: make Emacs detect if you have light or dark mode enabled system wide.
;;If you have two themes, a light one and a dark one, and you want the dark theme by default unless you have light mode enabled, add this to your init.el:

;; If we're on a Mac and the file "~/bin/get_dark.osascript" exists
;; and it outputs "false", activate light mode. Otherwise activate
;; dark mode.
;(cond ((and (file-exists-p "~/bin/get_dark.osascript")
;	     (string> (shell-command-to-string "command -v osascript") "")
;	     (equal "false\n"
;		    (shell-command-to-string "osascript ~/bin/get_dark.osascript")))
;	(mcj/theme-set-light))
;      (t (mcj/theme-set-dark)))

;; (mcj/theme-set-light and mcj/theme-set-light are functions that enable the light and the dark theme, respectively).

;;~/bin/get_dark.osascript contains the following:
;;
;;tell application "System Events"
;;	  tell appearance preferences
;;		get dark mode
;;	  end tell
;;end tell
))
#+end_src

** Linux
#+begin_src emacs-lisp
;; -=Linux specific settings
(cond ((eq system-type 'gnu/linux)
(defvar browse-url-browser-function)
(defvar browse-url-browser-program)
;;; http://stackoverflow.com/questions/15277172/how-to-make-emacs-open-all-buffers-in-one-window-debian-linux-gnome
;(setq pop-up-frames 'graphic-only)
(setq pop-up-frames nil)

;;; http://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome
;;; Open up URLs in browser using gnome-open (errors on bytecompile)
;(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "gnome-open")
(setq browse-url-browser-function 'browse-url-firefox)

;;; Problems with minibuffer font size display in KDE/Crunchbang/Unity(?), explictily set font
;;; List fonts with M-x descript-font
;(set-default-font "Monospace-10")
))
#+end_src
* Look and feel
** better defaults
A small number of better defaults for Emacs
Some taken from:
  https://github.com/technomancy/better-defaults
  https://git.sr.ht/~technomancy/better-defaults

#+begin_src emacs-lisp
(require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

;; When you visit a file, point goes to the last place where it was when you previously visited the same file.
;; https://www.emacswiki.org/emacs/SavePlace
(save-place-mode 1)
;(setq save-place-file (locate-user-emacs-file "places" ".emacs-places"))
(setq save-place-file (concat user-emacs-directory "var/places"))
(setq save-place-forget-unreadable-files nil)

(global-set-key (kbd "M-/") 'hippie-expand)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(savehist-mode 1)

(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      ;mouse-yank-at-point t
      require-final-newline t
      visible-bell t
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "var/backups"))))
#+end_src

** disable all themes
Disable all themes before loading a theme
#+begin_src emacs-lisp
(defadvice load-theme (before disable-themes-first activate)
  (fk/disable-all-themes))

(defun fk/disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))
#+end_src

load-theme without annoying confirmation
#+begin_src emacs-lisp
(advice-add 'load-theme
            :around
            (lambda (fn theme &optional no-confirm no-enable)
              (funcall fn theme t)))
#+end_src

** dracula theme
dracula-theme with telephone line status bar
https://draculatheme.com/
https://github.com/dracula/dracula-theme
https://www.reddit.com/r/emacs/comments/he55jl/whats_the_funky_character_on_the_mode_line/

#+begin_src emacs-lisp
(use-package dracula-theme
  :ensure t
  ;:init
  ;(setq dracula-enlarge-headings nil)
  :config
  ;; Don't change the font size for some headings and titles (default t)
  (setq dracula-enlarge-headings nil)
  (if (display-graphic-p)
      (load-theme 'dracula :no-confirm)	  ; Emacs in own window
    (load-theme 'wheatgrass :no-confirm)  ; Emacs in tty
  )
)
#+end_src

** all-the-icons
All-the-icons
https://github.com/domtronn/all-the-icons.el
NOTE: Install the fonts as well: M-x all-the-icons-install-fonts

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src

** doom-modeline
A fancy and fast mode-line inspired by minimalism design.
https://seagle0128.github.io/doom-modeline/
NOTE: Run (all-the-icons-install-fonts) one time after installing

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config
  ;; Fix? for Height below 25 not working anymore #187
  ;; https://github.com/seagle0128/doom-modeline/issues/187
  (defun my-doom-modeline--font-height ()
    "Calculate the actual char height of the mode-line."
    (+ (frame-char-height) 1))
  (advice-add #'doom-modeline--font-height :override #'my-doom-modeline--font-height)
)
#+end_src
* Productivity
** daily-log
#+begin_src emacs-lisp
;;; -- daily log -

(defun daily-log ()
  "Automatically opens my daily log file and positions cursor at end of
last sentence."
  (interactive)
  ;(diary)
  (find-file "~/org/DailyLogs/+current") ;symlink to current log
  (goto-char (point-max))  ;go to the maximum accessible value of point
  (search-backward "* Notes") ;search to Notes section first to bypass notes
  (if (re-search-backward "[.!?]") ;search for punctuation from end of file
      (forward-char 1))
  )
(global-set-key (kbd "<f9>") 'daily-log)

;;; ---------------------------------------------------------------------------
;(diary)

;; Email 1
;; I have been using a simple system for writing notes day by day.  Kind of
;; like a diary.  It's really very unsophisticated but helpful.  It will allow
;; you to make notes into a template file.  Weeks, Months (etc...) later, you
;; can refer to them.
;;
;; For those who have never seen it
;; http://aonws01/unix-admin/Daily_Logs/Jerry_Sievers/
;;
;; Many of you new guys' questions to me have been answered from these notes
;; (eg, license keys info, who's who and so forth).
;;
;; John Sconiers asked about this and I set him up with it.  Whole procedure
;; takes only a few minutes to install and probably about fifteen minutes per
;; day to keep up to date.  An investment in time that pays off later.  Other
;; admins who have left Aon used this and liked it too.
;;
;; It also comes with a CGI program which, if your home directory is
;; accessible to aonws01, can allow others to browse your diary (I hear
;; cheering and booing...)
;;
;; Please let me know.  It would be nice to have everyone using this thing at
;; least minimally.

;; Email 2
;; Chris, I have installed the package in your home directory.  Files are in
;; Aon/DailyLogs.  The current log has a symbolic link named +Current.  You
;; also have an alias 'diary' which you can type at the shell.  Doing so will
;; invoke vi on the +Current file and position the cursor on the very last '.'
;; character in the file.  I have added the $HOME/bin directory to your path
;; and created one cron job to stamp the 'monday' file weekly.
;;
;; You should run the command 'new-daily-log' once per week to start a new
;; file.  Optionally, the previous file can be emailed to the destination of
;; your choice.  See the Aon/DailyLogs/.config file for details.
;;
;; Please call if you have any questions.
#+end_src

** which-key
Emacs package that displays available keybindings in popup
https://github.com/justbur/emacs-which-key

Paging: C-h
    Cycle through the pages forward with n (or C-n)
    Cycle backwards with p (or C-p)
    Undo the last entered key (!) with u (or C-u)
    Call the default command bound to C-h, usually describe-prefix-bindings, with h (or C-h)

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode)
  :config
  (setq which-key-idle-delay 1)
  (setq which-key-setup-side-window-bottom t) ; Default
  (setq which-key-popup-type 'side-window) ;Default
)
#+end_src

** ibuffer
https://www.emacswiki.org/emacs/IbufferMode
ibuffer - *Nice* buffer switching

Search all marked buffers
  ‘M-s a C-s’ - Do incremental search in the marked buffers.
  ‘M-s a C-M-s’ - Isearch for regexp in the marked buffers.
  ‘U’ - Replace by regexp in each of the marked buffers.
  ‘Q’ - Query replace in each of the marked buffers.
  ‘I’ - As above, with a regular expression.

#+begin_src emacs-lisp
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer) ; replaces electric-buffer-list
  :config
    ;; Don't show empty buffer groups
    (setq ibuffer-show-empty-filter-groups nil)

    ;; work groups for ibuffer
    (setq ibuffer-saved-filter-groups
          '(("default"
             ("version control" (or (mode . svn-status-mode)
                       (mode . svn-log-edit-mode)
                       (name . "^\\*svn-")
                       (name . "^\\*vc\\*$")
                       (name . "^\\*Annotate")
                       (name . "^\\*vc-")
                       (name . "^\\*git-")
                       (name . "^\\*magit")))
             ("emacs" (or (name . "^\\*scratch\\*$")
                          (name . "^\\*Messages\\*$")
                          (name . "^TAGS\\(<[0-9]+>\\)?$")
                          (name . "^\\*info\\*$")
                          (name . "^\\*Occur\\*$")
                          (name . "^\\*grep\\*$")
                          (name . "^\\*Compile-Log\\*$")
                          (name . "^\\*Backtrace\\*$")
                          (name . "^\\*Process List\\*$")
                          (name . "^\\*gud\\*$")
                          (name . "^\\*Man")
                          (name . "^\\*WoMan")
                          (name . "^\\*Kill Ring\\*$")
                          (name . "^\\*Completions\\*$")
                          (name . "^\\*tramp")
                          (name . "^\\*shell\\*$")
                          (name . "^\\*compilation\\*$")))
             ("Helm" (or (name . "\*helm\*")))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")))
             ("emacs-source" (or (mode . emacs-lisp-mode)
                                 (filename . "/Applications/Emacs.app")
                                 (filename . "/bin/emacs")))
             ("emacs-config" (or (filename . ".emacs.d")
                                 (filename . "emacs-config")))
            ("org" (or (name . "^\\*org-")
                        (name . "^\\*Org")
                        (mode . org-mode)
                        (mode . muse-mode)
                        (name . "^\\*Calendar\\*$")
                        (name . "^+current$")
                        (name . "^diary$")
                        (name . "^\\*Agenda")))
             ("latex" (or (mode . latex-mode)
                          (mode . LaTeX-mode)
                          (mode . bibtex-mode)
                          (mode . reftex-mode)))
             ("dired" (or (mode . dired-mode)))
             ("perl" (mode . cperl-mode))
             ("erc" (mode . erc-mode))
             ("shell" (or (mode . shell-mode)
                            (name . "^\\*terminal\\*$")
                            (name . "^\\*ansi-term\\*$")
                            (name . "^\\*shell\\*$")
                            (name . "^\\*eshell\\*$")))
             ("gnus" (or (name . "^\\*gnus trace\\*$")
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble"))))))

    ;; Order the groups so the order is : [Default], [agenda], [emacs]
    (defadvice ibuffer-generate-filter-groups (after reverse-ibuffer-groups ()
                                                     activate)
      (setq ad-return-value (nreverse ad-return-value)))

    ;; Hide the following buffers
    ;;(setq ibuffer-never-show-predicates
    ;;      (list "\\*Completions\\*"
    ;;            "\\*vc\\*"))

    ;; Enable ibuffer expert mode, don't prompt on buffer deletes
    (setq ibuffer-expert t)

    ;; Load the 'work' group, can set to load groups by location
    ;; ibuffer-auto-mode is a minor mode that automatically keeps the buffer
    ;; list up to date. I turn it on in my ibuffer-mode-hook:
    (add-hook 'ibuffer-mode-hook
              '(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))
)
#+end_src
* File mananagement
** dired-x
https://www.gnu.org/software/emacs/manual/dired-x.html
https://www.emacswiki.org/emacs/DiredExtra#Dired_X
provides extra functionality for Dired Mode.

Hide file detail toggle `(`

OSX/BSD ls doesn't sort directories first, ls-lisp can
#+begin_src emacs-lisp
(use-package ls-lisp
  :custom
  ;(ls-lisp-emulation 'MacOS)
  (ls-lisp-ignore-case t)
  (ls-lisp-verbosity nil)
  (ls-lisp-dirs-first t)
  (ls-lisp-use-insert-directory-program nil)
)

(use-package dired-x
  :bind ("C-x C-j"   . dired-jump)
	("C-x 4 C-j" . dired-jump-other-window)
  :config
     ;; on macOS, ls doesn't support --dired option linux does
     (when (string= system-type "darwin")
       (setq dired-use-ls-dired nil))
     (setq-default dired-omit-files-p t)
     (setq dired-listing-switches "-alhv")
     ;(setq dired-use-ls-dired nil)
     ;(setq dired-listing-switches "-agho --group-directories-first") ; errors
     ;(define-key dired-mode-map (kbd "/") #'dired-narrow-fuzzy) ; requires dired-hacks
     (define-key dired-mode-map (kbd "e") #'read-only-mode)

     ;; omit-mode
     (setq dired-omit-files "^\\.\\|^#.#$\\|.~$") ; omit dot and backup files
     (define-key dired-mode-map (kbd "h") #'dired-omit-mode) ; overriding h:describe-mode
     (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))) ; start in omit-mode

     ;; Auto-refresh dired on file change
     (add-hook 'dired-mode-hook 'auto-revert-mode)

     ;; disable line wrapping in dired mode
     (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))

     ;; enable side-by-side dired buffer targets
     ;; Split your window, split-window-vertically & go to another dired directory.
     ;; When you will press C to copy, the other dir in the split pane will be
     ;; default destination.
     (setq dired-dwim-target t) ;; suggest copying/moving to other dired buffer in split view

     ;; Dired functions (find-alternate 'a' reuses dired buffer)
     (put 'dired-find-alternate-file 'disabled nil)
)
#+end_src

dired-launch
https://github.com/thomp/dired-launch
#+begin_src emacs-lisp
(use-package dired-launch
  :ensure t
  :hook
  (dired-mode . dired-launch-mode))
#+end_src

all-the-icons-dired
This adds dired support to all-the-icons.
https://github.com/jtbm37/all-the-icons-dired

Plus the fix for sub-directories?
https://www.reddit.com/r/emacs/comments/imy9f1/all_the_icons_dired_subtree/

Disabled on remote directories for now due to tramp slowdown issues

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :ensure t
  :config
  ;(if window-system
  ;  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
  (add-hook 'dired-mode-hook
            (lambda ()
              (interactive)
              (unless (file-remote-p default-directory)
                (all-the-icons-dired-mode))))
)
#+end_src

** ag.el
An Emacs frontend to The Silver Searcher
https://github.com/Wilfred/ag.el

#+begin_src emacs-lisp
(use-package ag
  :ensure t
  :commands (ag ag-regexp ag-project))
#+end_src

* Completions
** vertico/corfu/consult
vertico.el - VERTical Interactive COmpletion
https://github.com/minad/vertico

corfu.el - Completion Overlay Region FUnction
https://github.com/minad/corfu

marginalia.el - Marginalia in the minibuffer
https://github.com/minad/marginalia

consult.el - Consulting completing-read
https://github.com/minad/consult

NOTE: emacs in a terminal settings to use backspace in minibuffer:
 terminal- Preferences, Profiles, Advanced, check Delete sends C-h
 iTerm- Preferences, Profiles, Keys, Delete sensd ^H

#+begin_src emacs-lisp
;; add similar behavior to ivy, doesnt' work in cli mode?
(defun dw/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
      (backward-kill-word arg)))

;; https://www.reddit.com/r/emacs/comments/opf1kk/switched_to_vertigo_consult_and_minibuffer/
(use-package vertico
  :ensure t
  :bind (:map minibuffer-local-map
         ;("<backspace>" . dw/minibuffer-backward-kill)
         ("C-h" . dw/minibuffer-backward-kill) ; works in cli
         ;:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-v" . vertico-scroll-up)
         ("M-v" . vertico-scroll-down))
  :init
  (vertico-mode))

;; Use the `orderless' completion style.
;; Enable `partial-completion' for files to allow path expansion.
;; You may prefer to use `initials' instead of `partial-completion'.
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
        ;;completion-category-overrides '((file (styles . (partial-completion))))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :ensure t
  :config
  (setq savehist-file "~/.emacs.d/var/history")
  :init
  (savehist-mode))

;; Completions in Regions
(use-package corfu
  :ensure t
  ;:config
  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  ;(corfu-global-mode)
)

;; Helpful M-x annotations, think of as a replacement for ivy-rich
(use-package marginalia
  :ensure t
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))

;; Consult - search and navigation commands based
(use-package consult
  :ensure f
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)


;; Many useful completion commands
(use-package consult
  :ensure t
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history) ; maybe use C-r
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ;("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ;("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ;("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ;("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; Custom M-# bindings for fast register access
         ;("M-#" . consult-register-load)
         ;("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ;("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ;("M-g e" . consult-compile-error)
         ;("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)
         ;("M-g m" . consult-mark)
         ;("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ;("M-s k" . consult-keep-lines)
         ;("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         ("C-s"   . consult-line)                  ;; similar behavior to swiper
         ;:map isearch-mode-map
         ;("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ;("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ;("M-s l" . consult-line)                  ;; required by consult-line to detect isearch
  )
)
#+end_src

consult-dir - switch directories easily in Emacs
https://github.com/karthink/consult-dir
NOTE: wasn't able to pull for Melpa, using github for now
#+begin_src emacs-lisp
;(use-package consult-dir
;  :ensure t
;  :bind (("C-x C-d" . consult-dir)
;         :map vertico-map
;         ("C-x C-d" . consult-dir)
;         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

* Terminal
** eshell

#+begin_src emacs-lisp
;; Little quality of life improvement if you work with multiple eshell buffers:
(defun eshell-buffer-name ()
  (rename-buffer (concat "*eshell*<" (eshell/pwd) ">") t))
(add-hook 'eshell-directory-change-hook #'eshell-buffer-name)
(add-hook 'eshell-prompt-load-hook #'eshell-buffer-name)

(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (setq eshell-history-size         1000
        eshell-buffer-maximum-lines 1000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :ensure t
  :config
  (eshell-git-prompt-use-theme 'git-radar)
)

(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config
  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("top" "htop" "zsh" "vi" "vim")))
)
#+end_src

** vterm
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm
https://github.com/akermu/emacs-libvterm

Manual installation guide
#+begin_src text
Prep, add emacs.d/emacs-libvterm to ~/.gitignore

Clone the repository:
$ cd .emacs.d/var
$ git clone https://github.com/akermu/emacs-libvterm.git

On Mac, install cmake and libvterm
$ brew install cmake libvterm

Build the module
$ cd ~/.emacs.d/var/emacs-libvterm
$ mkdir -p build
$ cd build
$ cmake ..
$ make

Add to init.el
(use-package vterm
  :load-path  "path/to/emacs-libvterm/")
#+end_src

Notes:
#+begin_src text
Q) What are the vterm's equivalents of term-line-mode C-c C-j and term-char-mode C-c C-k?
A) It's C-c C-t to toggle vterm-copy-mode.
#+end_src

#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :load-path  "~/.emacs.d/var/emacs-libvterm"
  :bind ("C-c tv" . vterm)
  :config
  (setq vterm-max-scrollback 5000) ; default 1000, max is 100000
)
#+end_src
** tramp
It seems very slow (on MacOS?)
https://github.com/mpereira/.emacs.d/blob/master/configuration.org

More debugging
https://emacs.stackexchange.com/questions/33845/magit-with-tramp-is-slow

#+begin_src emacs-lisp
(use-package tramp
  :init
  ;; Set default connection method for TRAMP
  (setq tramp-default-method "sshx"))

;; Disable version control on tramp buffers to avoid freezes.
;(setq vc-ignore-dir-regexp
;      (format "\\(%s\\)\\|\\(%s\\)"
;              vc-ignore-dir-regexp
;              tramp-file-name-regexp))
;
;; Don’t clean up recentf tramp buffers.
;(setq recentf-auto-cleanup 'never)
;
;; make emacs not crazy slow under tramp
;(defadvice projectile-project-root (around ignore-remote first activate)
;  (unless (file-remote-p default-directory 'no-identification) ad-do-it))
;
;; This is supposedly faster than the default, scp.
;(setq tramp-default-method "ssh")
;
;; SSH controlmaster settings are set in ~/.ssh/config.
;(setq tramp-use-ssh-controlmaster-options nil)
;
;; This will put in effect PATH changes in the remote ~/.profile.
;(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
;
;; Store TRAMP auto-save files locally.
;(setq tramp-auto-save-directory
;      (expand-file-name "tramp-auto-save" user-emacs-directory))
;
;; A more representative name for this file.
;(setq tramp-persistency-file-name
;      (expand-file-name "tramp-connection-history" user-emacs-directory))
;
;; Cache SSH passwords during the whole Emacs session.
;(setq password-cache-expiry nil)
;
;; Reuse SSH connections. Taken from the TRAMP FAQ.
;(customize-set-variable 'tramp-ssh-controlmaster-options
;                        (concat
;                         "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
;                         "-o ControlMaster=auto -o ControlPersist=yes"))
#+end_src

* org-mode
** org
A GNU Emacs major mode for convenient plain text markup — and much more.
https://orgmode.org/
NOTE: use-package def moved to init.el to override built-in org version

#+begin_src emacs-lisp
(use-package calendar
  :custom
  (calendar-week-start-day 0))

;;; org-superstar (replacement for org-bullets)
;;; https://github.com/integral-dw/org-superstar-mode
(use-package org-superstar
  :ensure t
  :requires org
  ;:custom
  ;(org-superstar-headline-bullets-list '("◉" "○" "✸" "✿"))
  ;(org-superstar-bullet-list '("•"))
  ;(org-superstar-bullet-list '("■" "◆" "▲" "▶"))
  :hook (org-mode . org-superstar-mode)
  :config
  ;; Don't do anything special for item bullets or TODOs by default
  ;; these slow down larger org buffers.
  (setq org-superstar-prettify-item-bullets nil
        org-superstar-special-todo-items nil)
)

;; Prevent inadvertently edits an the invisible part of the buffer
(setq-default org-catch-invisible-edits 'smart)

;; Load additional exporters, or limit them with:  (setq org-export-backends '(ascii html latex odt))
;(eval-after-load 'org
;      (lambda()
;        (require 'ox-texinfo) ; texi and info
;        (require 'ox-md)      ; markdown
;        (require 'ox-odt)     ; opendoc text
;        (require 'ox-opml)
;        (require 'ox-confluence)))

;; Bind C-h o to org-info, loads info file
(define-key global-map (kbd "C-h o") 'org-info)

;; The following lines are always needed.  Choose your own keys.
;(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
;(global-set-key "\C-cb" 'org-iswitchb) ; no commnd, moved key to consult
(global-set-key "\C-cc" 'org-capture)

;; Set to the location of your Org files on your local system
(setq org-directory "~/org")

;; Open all txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))


;;; Agenda - Agenda window setup
(setq org-agenda-window-setup 'current-window) ;; don't kill my window setup

;; Include emacs diary, not needed if using org-anniversary
;(setq org-agenda-include-diary t)

;; Custom agenda commands
;; http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt
(setq org-agenda-custom-commands
'(
("P" "Projects"
              ((tags "PROJECT")))

("H" "Office and Home Lists"
     ((agenda)
          (tags-todo "OFFICE")
          (tags-todo "HOME")
          (tags-todo "COMPUTER")
          (tags-todo "DVD")
          (tags-todo "READING")))

;("D" "Daily Action List"
;     ((agenda "" ((org-agenda-ndays 1)
;                     (org-agenda-sorting-strategy
;                        (quote ((agenda time-up priority-down tag-up))))
;                     (org-deadline-warning-days 0)
;                     ))))

("d" "Do today"
   ;; Show all todos and everything due today.
   ((agenda "" (
                ;; Limits the agenda to a single day
                (org-agenda-span 1)
                ))
    (todo "TODO")))

("D" "Deadline due"
     ((tags-todo "+TODO=\"TODO\"+DEADLINE<=\"<today>\""
                 ((org-agenda-overriding-header "Deadline today")))
      (tags-todo "+TODO=\"TODO\"+DEADLINE=\"\""
                 ((org-agenda-overriding-header "No deadline")))))

))


;;; Capture
;; NOTE:  Fibonacci format: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100
;; Setup default target for notes and a global hotkey for new ones
;; NOTE:  Need org-mode version 6.3.6 or later for this to work
;; http://stackoverflow.com/questions/3622603/org-mode-setup-problem-when-trying-to-use-capture
(setq org-default-notes-file (expand-file-name "~/org/notes.org"))

;; Capture templates - C-c c t
;; Based on Sacha Chua's org-capture-tempaltes
;; http://pages.sachachua.com/.emacs.d/Sacha.html
(defvar dbj/org-basic-task-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-jira-template "* TODO %^{Task}
SCHEDULED: %^t

:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:URL: %^{URL}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(defvar dbj/org-basic-someday-template "* %^{Task}
:PROPERTIES:
:Story: %^{story|2|0|0.5|1|2|3|5|8|13}
:END:
:LOGBOOK:
- State \"TODO\"       from \"\"           %U
:END:
%?" "Basic task data")

(setq org-capture-templates
      `(("t" "Tasks" entry
          (file "~/org/inbox.org"), dbj/org-basic-task-template)
          ;(file+headline "~/org/inbox.org" "Tasks"), dbj/org-basic-task-template)

        ("j" "Jira" entry
          (file "~/org/inbox.org"), dbj/org-basic-jira-template)

        ("s" "Someday task" entry
          (file "~/org/someday.org"), dbj/org-basic-someday-template)

        ("r" "Reference information" entry
          (file+headline "~/org/reference.org" "Inbox"))

        ("n" "Notes" entry
          (file+headline "~/org/notes.org"))

        ("o" "Journal" entry
          (file+olp+datetree "~/org/journal.org")
          "* %?\nEntered on %U\n  %i\n  %a")
))


;;; Other
;; When adding new heading below the current heading, the new heading is
;; Placed after the body instead of before it.  C-<RET>
(setq org-insert-heading-respect-content t)

;; Set Todo keywords, same as:
;; Shortcut key:  C-c C-t
;; #+TODO: TODO(t) INPROGRESS(p) WAITING(w) | DONE(d) CANCELED(c)
(setq org-todo-keywords
      '((sequence "TODO(t)" "INPROGRESS(p)" "WAITING(w@/!)")
        (sequence "|" "DONE(d!)" "CANCELED(c@)")))

;; Set Tags, same as:
;; #+TAGS: home(h) work(w) @computer(c) @phone(p) errants(e)
(setq org-tag-alist '(("@office" . ?o) ("@home" . ?h) ("computer" . ?c)
                      ("phone" . ?p) ("reading" . ?r)))

;; Prevent C-k from killing whole subtrees and losing work
(setq org-special-ctrl-k t)

;; Fontify code buffers in org, instead of grey text
;; This is especially nice when you open an editing buffer with [Ctrl+c ']
;; to insert code into the #+begin_src ... #+end_src area.
(setq org-src-fontify-natively t)

;; org-refile (C-c C-w) settings from:
;; http://www.mail-archive.com/emacs-orgmode@gnu.org/msg34415.html
;; http://doc.norang.ca/org-mode.html#RefileSetup
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets '((org-agenda-files :maxlevel . 2)
                           (nil :maxlevel . 3)))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
;(setq org-refile-use-outline-path 'file)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

;;; Strike-through finished todos
;; sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))

;;; Make sure to hightlight mysql sql keywords: - errors on compile
;;; ex. #+BEGIN_SRC sql
;;;        SELECT foo FROM bar
;;;     #+END_SRC
;(add-hook 'sql-mode-hook
;          (lambda ()
;            (sql-highlight-mysql-keywords)))

;;; Enable other org-babel languages
(org-babel-do-load-languages
  (quote org-babel-load-languages)
  (quote ((emacs-lisp . t)
          ;(asymptote . t) ;Asymptote
          (awk . t)       ;Awk
          (C . t)         ;C
          ;(C++ . t)       ;C++
          ;(clojure . t)   ;Clojure
          ;(css . t)       ;CSS
          ;(d . f)        ;D
          ;(ditaa . f)     ;ditaa
          ;(dot . t)       ;Graphviz
          ;(calc . t)      ; Emacs Calc
          ;(fortran . t)   ;Fortran
          ;(gnuplot . t)   ;requires gnuplot installed
          ;(haskell . t)   ;Haskell
          (java . t)      ;Java
          (js . t)        ;Javascript
          ;(latex . t)     ;LaTeX
          ;(ledger . f)    ;Ledger
          (lisp . t)      ;Lisp
          ;(lilypond . t)  ;Lilypond
          ;(lua . t)       ;Lua
          ;(matlab . t)    ;MATLAB
          ;(mscgen . t)    ;Mscgen
          ;(ocaml . t)     ;Objective Caml
          ;(octave . t)    ;octave
          (org . t)       ;Org mode
          ;(oz . f)        ;Oz
          (perl . t)      ;Perl
          ;(plantuml . t)  ;Plantuml
          ;(processing . t) ;Processing.js
          (python . t)    ;Python
          ;(R . t)         ;R
          (ruby . t)      ;Ruby
          ;(sass . t)      ;Sass
          ;(scheme . t)    ;Scheme
          ;(screen . t)    ;GNU Screen
          (sed . t)       ;Sed
          (shell . t)     ;shell
          (sql . t)       ; SQL
          ;(sqlite .t)     ;SQLite
)))
#+end_src

** deft
deft - an Emacs mode for quickly browsing, filtering, and editing
directories of plain text notes.  http://jblevins.org/projects/deft/
http://jblevins.org/git/deft.git

Modified for org-roam 20200601

Currently needs work with Org-Roam v2 update, only showing ID
#+begin_src emacs-lisp
;; Set org-roam directory in one place to prevent madness
;(setq org-roam-directory-location "~/org-roam/")
;
;(use-package deft
;  :requires (org)
;  :bind
;  ("C-c n d" . deft)
;  :custom
;  ;(deft-directory "~/org-roam/")
;  (deft-directory org-roam-directory-location)
;  (deft-recursive t)
;  (deft-use-filename-as-title nil)
;  (deft-use-filter-string-for-filename t)
;  ;(deft-org-mode-title-prefix t)
;  (deft-file-naming-rules '((noslash . "-")
;                            (nospace . "-")
;                            (case-fn . downcase)))
;  (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg"))
;  (deft-default-extension "org")
;  (deft-text-mode 'org-mode)
;)
#+end_src

** org-roam
Org-roam is a plain-text knowledge management system. (now v2)
https://github.com/org-roam/org-roam
https://org-roam.readthedocs.io/en/master/

Upgrade to org-roam v2 broke it, commented out for now
https://www.reddit.com/r/emacs/comments/om3fjm/releasing_orgroam_v2_jethros_blog/

NOTE: can use  sub-directories by adding to capture templates, has to exist first
ex. :if-new (file+head "projects/%<%Y%m%d%H%M%S>-${slug}.org" "#+title:

#+begin_src emacs-lisp
;; Set org-roam-directory based on system-name
(if (string= (system-name) "lothlorien.local")
    (setq org-roam-directory-location "~/org-roam-home/")
  (setq org-roam-directory-location "~/org-roam/")
)

(use-package org-roam
  :ensure t
  :requires (org)
  :init
  (setq org-roam-v2-ack t)
  :custom
  ;; setup org-roam-daily directory
  (org-roam-dailies-directory "~/org-roam/daily/")
  ;(org-roam-directory (file-truename "/path/to/org-files/"))
  (org-roam-directory org-roam-directory-location)
  (org-roam-completion-everywhere t)
  ;
  (org-roam-db-location "~/.emacs.d/var/org-roam.db")
  (org-roam-index-file "index.org")
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n g" . org-roam-graph)
         ("C-c n c" . org-roam-capture)
         ("C-c n I" . completion-at-point)
         ;; Testing hacks from System Crafters
         ("C-c n p" . my/org-roam-find-project)
         ("C-c n t" . my/org-roam-capture-task)
         ("C-c n b" . my/org-roam-capture-inbox)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today)
         ("C-c n d j" . org-roam-dailies-capture-today)
         ("C-c n d Y" . org-roam-dailies-capture-yesterday)
         ("C-c n d T" . org-roam-dailies-capture-tomorrow)
         ("C-c n d v" . org-roam-dailies-capture-date)
         ("C-c n d y" . org-roam-dailies-goto-yesterday)
         ("C-c n d t" . org-roam-dailies-goto-tomorrow)
         ("C-c n d o" . org-roam-dailies-goto-today)
         ("C-c n d d" . org-roam-dailies-goto-date)
         ("C-c n d f" . org-roam-dailies-goto-next-note)
         ("C-c n d b" . org-roam-dailies-goto-previous-note))
  :config
  (org-roam-setup)
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  ;(require 'org-roam-protocol)

  ;;
  ;; from org-roam hacks
  ;; https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
  ;;
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)

  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Project")
     :templates
     '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
        :unnarrowed t))))

  (defun my/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("i" "inbox" plain "* %?"
                                    :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "Project"))
                       :templates '(("p" "project" plain "** TODO %?"
                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                            ("Tasks"))))))

  (defun my/org-roam-copy-todo-to-today ()
    (interactive)
    (let ((org-refile-keep t) ;; Set this to nil to delete the original!
          (org-roam-dailies-capture-templates
            '(("t" "tasks" entry "%?"
               :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
          (org-after-refile-insert-hook #'save-buffer)
          today-file
          pos)
      (save-window-excursion
        (org-roam-dailies--capture (current-time) t)
        (setq today-file (buffer-file-name))
        (setq pos (point)))

      ;; Only refile if the target file is different than the current file
      (unless (equal (file-truename today-file)
                     (file-truename (buffer-file-name)))
        (org-refile nil nil (list "Tasks" today-file nil pos)))))

  (add-to-list 'org-after-todo-state-change-hook
               (lambda ()
                 (when (equal org-state "DONE")
                   (my/org-roam-copy-todo-to-today))))


  ;;
  ;; Configure default capture template
  ;;
  (setq org-roam-capture-templates
  '(("d" "default" plain "%?"
     :if-new (file+head "%<%Y%m%d>-${slug}.org"
                        "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n#+STARTUP: overview\n#+category: ${title}\n#+filetags: \n")
     :unnarrowed t)))

  ;; Configure default dailies capture template, from docs
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+startup: overview\n#+title: %<%Y-%m-%d>\n"))))

  ;;
  ;; Update a field (#+LAST_MODIFIED: ) at save using bulit in time-stamp
  ;; https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321
  ;;
  (add-hook 'org-mode-hook (lambda ()
                           (setq-local time-stamp-active t
                                       time-stamp-line-limit 18
                                       time-stamp-start "^#\\+LAST_MODIFIED: [ \t]*"
                                       time-stamp-end "$"
                                       time-stamp-format "\[%Y-%m-%d %a %H:%M\]")
                           (add-hook 'before-save-hook 'time-stamp nil 'local)))
)
#+end_src
* Development
** magit
It's Magit! A Git porcelain inside Emacs. https://magit.vc
https://github.com/magit/magit

#+begin_src emacs-lisp
;; Fixes for emacs 27
;; Magit Error: Warning (with-editor): Cannot determine a suitable Emacsclient
(setq-default with-editor-emacsclient-executable "emacsclient")

(use-package magit
  :ensure t
  :commands magit
  :bind
    (("C-x g" . magit-status)
     ("C-x G" . magit-status-with-prefix)
     ("C-x M-g" . magit-dispatch)
     ("C-c M-g" . global-magit-file-mode))
)
#+end_src

#+begin_src text
PriorOutcome

I often find myself wanting to be able to switch between master and a feature branch in magit quickly:

(defun lw-magit-checkout-last (&optional start-point)
    (interactive)
    (magit-branch-checkout "-" start-point))
(transient-append-suffix 'magit-branch "w"
  '("-" "last branch" lw-magit-checkout-last))

So that C-x g b - switches to the last branch I was on, similar to cd -.
#+end_src

** git gutter - disabled
Emacs port of GitGutter which is Sublime Text Plugin
Show change information from git
https://github.com/syohex/emacs-git-gutter

#+begin_src emacs-lisp
(use-package git-gutter
  :ensure f
  :config
    (global-git-gutter-mode t)
)
#+end_src
** smartparens
Smartparens is a minor mode for dealing with pairs in Emacs.
https://github.com/Fuco1/smartparens

NOTE: changed smartparens-global-mode to show-smartparens-global-mode
https://github.com/Fuco1/smartparens/wiki/Show-smartparens-mode

Cheatsheat
https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95

#+begin_src emacs-lisp
;(use-package smartparens
;  :hook (after-init . show-smartparens-global-mode)
;  :config (require 'smartparens-config)
;    (add-hook 'python-mode-hook #'smartparens-mode)
;)

(use-package smartparens
  :ensure t
  :hook (prog-mode . smartparens-mode))
#+end_src

** shell-script-mode
shell-script-mode is a major mode for shell script editing.
https://www.emacswiki.org/emacs/ShMode

#+begin_src emacs-lisp
(use-package sh-script
  :mode (("zshecl" . sh-mode)
         ("\\.zsh\\'" . sh-mode)
         ("\\.sh\\'" . sh-mode))
  :custom
  ;; zsh
  (system-uses-terminfo nil))

(use-package executable
  :hook
  (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

* testing

persp-mode - https://github.com/Bad-ptr/persp-mode.el
#+begin_src emacs-lisp
(use-package persp-mode
  :ensure f
  :init (add-hook 'after-init-hook #'persp-mode)
)
#+end_src


multiple-cursors - https://github.com/magnars/multiple-cursors.el
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
)
#+end_src

diff-hl (instead of vc-gutter/doom) - https://github.com/dgutov/diff-hl
#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :config
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (diff-hl-mode t)
  ;(global-diff-hl-mode)
)
#+end_src
